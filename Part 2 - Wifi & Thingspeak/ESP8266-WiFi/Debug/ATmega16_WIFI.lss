
ATmega16_WIFI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b4  00800060  000014a4  00001538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000aa  00800214  00800214  000016ec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000192d  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b29  00000000  00000000  000031e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be4  00000000  00000000  00003d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  000048f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000900  00000000  00000000  00004cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de3  00000000  00000000  000055c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000063ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 31       	cpi	r26, 0x14	; 20
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a4 e1       	ldi	r26, 0x14	; 20
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <main>
      8a:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
}

bool ESP8266_Close()
{
	return SendATandExpectResponse("AT+CIPCLOSE=1", "\r\nOK\r\n");
}
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	2f 93       	push	r18
      9e:	8f 93       	push	r24
      a0:	9f 93       	push	r25
      a2:	ef 93       	push	r30
      a4:	ff 93       	push	r31
      a6:	2f b7       	in	r18, 0x3f	; 63
      a8:	f8 94       	cli
      aa:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <Counter>
      ae:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <Counter+0x1>
      b2:	8c b1       	in	r24, 0x0c	; 12
      b4:	e3 5e       	subi	r30, 0xE3	; 227
      b6:	fd 4f       	sbci	r31, 0xFD	; 253
      b8:	80 83       	st	Z, r24
      ba:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <Counter>
      be:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <Counter+0x1>
      c2:	01 96       	adiw	r24, 0x01	; 1
      c4:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <Counter+0x1>
      c8:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <Counter>
      cc:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <Counter>
      d0:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <Counter+0x1>
      d4:	80 3a       	cpi	r24, 0xA0	; 160
      d6:	91 05       	cpc	r25, r1
      d8:	41 f4       	brne	.+16     	; 0xea <__vector_11+0x58>
      da:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <Counter+0x1>
      de:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <Counter>
      e2:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <pointer+0x1>
      e6:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <pointer>
      ea:	2f bf       	out	0x3f, r18	; 63
      ec:	ff 91       	pop	r31
      ee:	ef 91       	pop	r30
      f0:	9f 91       	pop	r25
      f2:	8f 91       	pop	r24
      f4:	2f 91       	pop	r18
      f6:	0f 90       	pop	r0
      f8:	0f be       	out	0x3f, r0	; 63
      fa:	0f 90       	pop	r0
      fc:	1f 90       	pop	r1
      fe:	18 95       	reti

00000100 <Read_Response>:
     100:	2f 92       	push	r2
     102:	3f 92       	push	r3
     104:	4f 92       	push	r4
     106:	5f 92       	push	r5
     108:	6f 92       	push	r6
     10a:	7f 92       	push	r7
     10c:	8f 92       	push	r8
     10e:	9f 92       	push	r9
     110:	af 92       	push	r10
     112:	bf 92       	push	r11
     114:	cf 92       	push	r12
     116:	df 92       	push	r13
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	cd b7       	in	r28, 0x3d	; 61
     126:	de b7       	in	r29, 0x3e	; 62
     128:	2c 97       	sbiw	r28, 0x0c	; 12
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	f8 94       	cli
     12e:	de bf       	out	0x3e, r29	; 62
     130:	0f be       	out	0x3f, r0	; 63
     132:	cd bf       	out	0x3d, r28	; 61
     134:	9e 83       	std	Y+6, r25	; 0x06
     136:	8d 83       	std	Y+5, r24	; 0x05
     138:	2d b7       	in	r18, 0x3d	; 61
     13a:	3e b7       	in	r19, 0x3e	; 62
     13c:	3c 87       	std	Y+12, r19	; 0x0c
     13e:	2b 87       	std	Y+11, r18	; 0x0b
     140:	fc 01       	movw	r30, r24
     142:	01 90       	ld	r0, Z+
     144:	00 20       	and	r0, r0
     146:	e9 f7       	brne	.-6      	; 0x142 <Read_Response+0x42>
     148:	31 97       	sbiw	r30, 0x01	; 1
     14a:	5f 01       	movw	r10, r30
     14c:	a8 1a       	sub	r10, r24
     14e:	b9 0a       	sbc	r11, r25
     150:	bb 24       	eor	r11, r11
     152:	a5 01       	movw	r20, r10
     154:	41 50       	subi	r20, 0x01	; 1
     156:	51 09       	sbc	r21, r1
     158:	58 87       	std	Y+8, r21	; 0x08
     15a:	4f 83       	std	Y+7, r20	; 0x07
     15c:	8d b7       	in	r24, 0x3d	; 61
     15e:	9e b7       	in	r25, 0x3e	; 62
     160:	8a 19       	sub	r24, r10
     162:	9b 09       	sbc	r25, r11
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	f8 94       	cli
     168:	9e bf       	out	0x3e, r25	; 62
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	8d bf       	out	0x3d, r24	; 61
     16e:	ad b7       	in	r26, 0x3d	; 61
     170:	be b7       	in	r27, 0x3e	; 62
     172:	11 96       	adiw	r26, 0x01	; 1
     174:	4d 01       	movw	r8, r26
     176:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     17a:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
     17e:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <__data_end+0x2>
     182:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <__data_end+0x3>
     186:	80 3f       	cpi	r24, 0xF0	; 240
     188:	98 4d       	sbci	r25, 0xD8	; 216
     18a:	af 4f       	sbci	r26, 0xFF	; 255
     18c:	bf 4f       	sbci	r27, 0xFF	; 255
     18e:	61 f4       	brne	.+24     	; 0x1a8 <Read_Response+0xa8>
     190:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end>
     194:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x1>
     198:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <__data_end+0x2>
     19c:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <__data_end+0x3>
     1a0:	82 e0       	ldi	r24, 0x02	; 2
     1a2:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <Response_Status>
     1a6:	9b c0       	rjmp	.+310    	; 0x2de <Read_Response+0x1de>
     1a8:	19 82       	std	Y+1, r1	; 0x01
     1aa:	1a 82       	std	Y+2, r1	; 0x02
     1ac:	1b 82       	std	Y+3, r1	; 0x03
     1ae:	1c 82       	std	Y+4, r1	; 0x04
     1b0:	2f 80       	ldd	r2, Y+7	; 0x07
     1b2:	38 84       	ldd	r3, Y+8	; 0x08
     1b4:	28 0c       	add	r2, r8
     1b6:	39 1c       	adc	r3, r9
     1b8:	94 01       	movw	r18, r8
     1ba:	2f 5f       	subi	r18, 0xFF	; 255
     1bc:	3f 4f       	sbci	r19, 0xFF	; 255
     1be:	3a 87       	std	Y+10, r19	; 0x0a
     1c0:	29 87       	std	Y+9, r18	; 0x09
     1c2:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <Response_Status>
     1c6:	84 30       	cpi	r24, 0x04	; 4
     1c8:	11 f4       	brne	.+4      	; 0x1ce <Read_Response+0xce>
     1ca:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <Response_Status>
     1ce:	ed e1       	ldi	r30, 0x1D	; 29
     1d0:	f2 e0       	ldi	r31, 0x02	; 2
     1d2:	01 90       	ld	r0, Z+
     1d4:	00 20       	and	r0, r0
     1d6:	e9 f7       	brne	.-6      	; 0x1d2 <Read_Response+0xd2>
     1d8:	31 97       	sbiw	r30, 0x01	; 1
     1da:	cf 01       	movw	r24, r30
     1dc:	8d 51       	subi	r24, 0x1D	; 29
     1de:	92 40       	sbci	r25, 0x02	; 2
     1e0:	6c 01       	movw	r12, r24
     1e2:	e1 2c       	mov	r14, r1
     1e4:	f1 2c       	mov	r15, r1
     1e6:	c1 14       	cp	r12, r1
     1e8:	d1 04       	cpc	r13, r1
     1ea:	e1 04       	cpc	r14, r1
     1ec:	f1 04       	cpc	r15, r1
     1ee:	09 f4       	brne	.+2      	; 0x1f2 <Read_Response+0xf2>
     1f0:	51 c0       	rjmp	.+162    	; 0x294 <Read_Response+0x194>
     1f2:	89 ef       	ldi	r24, 0xF9	; 249
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <Read_Response+0xf6>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <Read_Response+0xfc>
     1fc:	00 00       	nop
     1fe:	29 81       	ldd	r18, Y+1	; 0x01
     200:	3a 81       	ldd	r19, Y+2	; 0x02
     202:	4b 81       	ldd	r20, Y+3	; 0x03
     204:	5c 81       	ldd	r21, Y+4	; 0x04
     206:	2f 5f       	subi	r18, 0xFF	; 255
     208:	3f 4f       	sbci	r19, 0xFF	; 255
     20a:	4f 4f       	sbci	r20, 0xFF	; 255
     20c:	5f 4f       	sbci	r21, 0xFF	; 255
     20e:	29 83       	std	Y+1, r18	; 0x01
     210:	3a 83       	std	Y+2, r19	; 0x02
     212:	4b 83       	std	Y+3, r20	; 0x03
     214:	5c 83       	std	Y+4, r21	; 0x04
     216:	ed e1       	ldi	r30, 0x1D	; 29
     218:	f2 e0       	ldi	r31, 0x02	; 2
     21a:	01 90       	ld	r0, Z+
     21c:	00 20       	and	r0, r0
     21e:	e9 f7       	brne	.-6      	; 0x21a <Read_Response+0x11a>
     220:	31 97       	sbiw	r30, 0x01	; 1
     222:	cf 01       	movw	r24, r30
     224:	8d 51       	subi	r24, 0x1D	; 29
     226:	92 40       	sbci	r25, 0x02	; 2
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b0 e0       	ldi	r27, 0x00	; 0
     22c:	c8 16       	cp	r12, r24
     22e:	d9 06       	cpc	r13, r25
     230:	ea 06       	cpc	r14, r26
     232:	fb 06       	cpc	r15, r27
     234:	79 f5       	brne	.+94     	; 0x294 <Read_Response+0x194>
     236:	0d e1       	ldi	r16, 0x1D	; 29
     238:	12 e0       	ldi	r17, 0x02	; 2
     23a:	41 2c       	mov	r4, r1
     23c:	51 2c       	mov	r5, r1
     23e:	32 01       	movw	r6, r4
     240:	4f 81       	ldd	r20, Y+7	; 0x07
     242:	58 85       	ldd	r21, Y+8	; 0x08
     244:	69 85       	ldd	r22, Y+9	; 0x09
     246:	7a 85       	ldd	r23, Y+10	; 0x0a
     248:	c4 01       	movw	r24, r8
     24a:	0e 94 2c 07 	call	0xe58	; 0xe58 <memmove>
     24e:	d8 01       	movw	r26, r16
     250:	8d 91       	ld	r24, X+
     252:	8d 01       	movw	r16, r26
     254:	f1 01       	movw	r30, r2
     256:	80 83       	st	Z, r24
     258:	a5 01       	movw	r20, r10
     25a:	6d 81       	ldd	r22, Y+5	; 0x05
     25c:	7e 81       	ldd	r23, Y+6	; 0x06
     25e:	c4 01       	movw	r24, r8
     260:	0e 94 3e 07 	call	0xe7c	; 0xe7c <strncmp>
     264:	89 2b       	or	r24, r25
     266:	61 f4       	brne	.+24     	; 0x280 <Read_Response+0x180>
     268:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end>
     26c:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x1>
     270:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <__data_end+0x2>
     274:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <__data_end+0x3>
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <Response_Status>
     27e:	2f c0       	rjmp	.+94     	; 0x2de <Read_Response+0x1de>
     280:	ff ef       	ldi	r31, 0xFF	; 255
     282:	4f 1a       	sub	r4, r31
     284:	5f 0a       	sbc	r5, r31
     286:	6f 0a       	sbc	r6, r31
     288:	7f 0a       	sbc	r7, r31
     28a:	4c 14       	cp	r4, r12
     28c:	5d 04       	cpc	r5, r13
     28e:	6e 04       	cpc	r6, r14
     290:	7f 04       	cpc	r7, r15
     292:	b1 f6       	brne	.-84     	; 0x240 <Read_Response+0x140>
     294:	89 ef       	ldi	r24, 0xF9	; 249
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <Read_Response+0x198>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <Read_Response+0x19e>
     29e:	00 00       	nop
     2a0:	29 81       	ldd	r18, Y+1	; 0x01
     2a2:	3a 81       	ldd	r19, Y+2	; 0x02
     2a4:	4b 81       	ldd	r20, Y+3	; 0x03
     2a6:	5c 81       	ldd	r21, Y+4	; 0x04
     2a8:	2f 5f       	subi	r18, 0xFF	; 255
     2aa:	3f 4f       	sbci	r19, 0xFF	; 255
     2ac:	4f 4f       	sbci	r20, 0xFF	; 255
     2ae:	5f 4f       	sbci	r21, 0xFF	; 255
     2b0:	29 83       	std	Y+1, r18	; 0x01
     2b2:	3a 83       	std	Y+2, r19	; 0x02
     2b4:	4b 83       	std	Y+3, r20	; 0x03
     2b6:	5c 83       	std	Y+4, r21	; 0x04
     2b8:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     2bc:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
     2c0:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <__data_end+0x2>
     2c4:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <__data_end+0x3>
     2c8:	80 5f       	subi	r24, 0xF0	; 240
     2ca:	98 4d       	sbci	r25, 0xD8	; 216
     2cc:	af 4f       	sbci	r26, 0xFF	; 255
     2ce:	bf 4f       	sbci	r27, 0xFF	; 255
     2d0:	28 17       	cp	r18, r24
     2d2:	39 07       	cpc	r19, r25
     2d4:	4a 07       	cpc	r20, r26
     2d6:	5b 07       	cpc	r21, r27
     2d8:	08 f4       	brcc	.+2      	; 0x2dc <Read_Response+0x1dc>
     2da:	73 cf       	rjmp	.-282    	; 0x1c2 <Read_Response+0xc2>
     2dc:	59 cf       	rjmp	.-334    	; 0x190 <Read_Response+0x90>
     2de:	4b 85       	ldd	r20, Y+11	; 0x0b
     2e0:	5c 85       	ldd	r21, Y+12	; 0x0c
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	5e bf       	out	0x3e, r21	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	4d bf       	out	0x3d, r20	; 61
     2ec:	2c 96       	adiw	r28, 0x0c	; 12
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	cd bf       	out	0x3d, r28	; 61
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	df 90       	pop	r13
     306:	cf 90       	pop	r12
     308:	bf 90       	pop	r11
     30a:	af 90       	pop	r10
     30c:	9f 90       	pop	r9
     30e:	8f 90       	pop	r8
     310:	7f 90       	pop	r7
     312:	6f 90       	pop	r6
     314:	5f 90       	pop	r5
     316:	4f 90       	pop	r4
     318:	3f 90       	pop	r3
     31a:	2f 90       	pop	r2
     31c:	08 95       	ret

0000031e <ESP8266_Clear>:
     31e:	80 ea       	ldi	r24, 0xA0	; 160
     320:	ed e1       	ldi	r30, 0x1D	; 29
     322:	f2 e0       	ldi	r31, 0x02	; 2
     324:	df 01       	movw	r26, r30
     326:	1d 92       	st	X+, r1
     328:	8a 95       	dec	r24
     32a:	e9 f7       	brne	.-6      	; 0x326 <ESP8266_Clear+0x8>
     32c:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <Counter+0x1>
     330:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <Counter>
     334:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <pointer+0x1>
     338:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <pointer>
     33c:	08 95       	ret

0000033e <Start_Read_Response>:
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	ec 01       	movw	r28, r24
     344:	84 e0       	ldi	r24, 0x04	; 4
     346:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <Response_Status>
     34a:	ce 01       	movw	r24, r28
     34c:	0e 94 80 00 	call	0x100	; 0x100 <Read_Response>
     350:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <Response_Status>
     354:	88 23       	and	r24, r24
     356:	c9 f3       	breq	.-14     	; 0x34a <Start_Read_Response+0xc>
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret

0000035e <WaitForExpectedResponse>:
     35e:	0e 94 9f 01 	call	0x33e	; 0x33e <Start_Read_Response>
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <Response_Status>
     368:	92 30       	cpi	r25, 0x02	; 2
     36a:	09 f4       	brne	.+2      	; 0x36e <WaitForExpectedResponse+0x10>
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	08 95       	ret

00000370 <SendATandExpectResponse>:
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	8c 01       	movw	r16, r24
     37a:	eb 01       	movw	r28, r22
     37c:	0e 94 8f 01 	call	0x31e	; 0x31e <ESP8266_Clear>
     380:	c8 01       	movw	r24, r16
     382:	0e 94 b7 04 	call	0x96e	; 0x96e <USART_SendString>
     386:	88 ec       	ldi	r24, 0xC8	; 200
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 b7 04 	call	0x96e	; 0x96e <USART_SendString>
     38e:	ce 01       	movw	r24, r28
     390:	0e 94 af 01 	call	0x35e	; 0x35e <WaitForExpectedResponse>
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	08 95       	ret

0000039e <ESP8266_ApplicationMode>:
     39e:	0f 93       	push	r16
     3a0:	1f 93       	push	r17
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	64 97       	sbiw	r28, 0x14	; 20
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	f8 94       	cli
     3b0:	de bf       	out	0x3e, r29	; 62
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	cd bf       	out	0x3d, r28	; 61
     3b6:	8e 01       	movw	r16, r28
     3b8:	0f 5f       	subi	r16, 0xFF	; 255
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	94 e1       	ldi	r25, 0x14	; 20
     3be:	f8 01       	movw	r30, r16
     3c0:	11 92       	st	Z+, r1
     3c2:	9a 95       	dec	r25
     3c4:	e9 f7       	brne	.-6      	; 0x3c0 <ESP8266_ApplicationMode+0x22>
     3c6:	1f 92       	push	r1
     3c8:	8f 93       	push	r24
     3ca:	87 e6       	ldi	r24, 0x67	; 103
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	9f 93       	push	r25
     3d0:	8f 93       	push	r24
     3d2:	1f 93       	push	r17
     3d4:	0f 93       	push	r16
     3d6:	0e 94 66 07 	call	0xecc	; 0xecc <sprintf>
     3da:	1c 8a       	std	Y+20, r1	; 0x14
     3dc:	60 e6       	ldi	r22, 0x60	; 96
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	c8 01       	movw	r24, r16
     3e2:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	64 96       	adiw	r28, 0x14	; 20
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	de bf       	out	0x3e, r29	; 62
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	cd bf       	out	0x3d, r28	; 61
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	08 95       	ret

00000408 <ESP8266_ConnectionMode>:
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	64 97       	sbiw	r28, 0x14	; 20
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	8e 01       	movw	r16, r28
     422:	0f 5f       	subi	r16, 0xFF	; 255
     424:	1f 4f       	sbci	r17, 0xFF	; 255
     426:	94 e1       	ldi	r25, 0x14	; 20
     428:	f8 01       	movw	r30, r16
     42a:	11 92       	st	Z+, r1
     42c:	9a 95       	dec	r25
     42e:	e9 f7       	brne	.-6      	; 0x42a <ESP8266_ConnectionMode+0x22>
     430:	1f 92       	push	r1
     432:	8f 93       	push	r24
     434:	85 e7       	ldi	r24, 0x75	; 117
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	9f 93       	push	r25
     43a:	8f 93       	push	r24
     43c:	1f 93       	push	r17
     43e:	0f 93       	push	r16
     440:	0e 94 66 07 	call	0xecc	; 0xecc <sprintf>
     444:	1c 8a       	std	Y+20, r1	; 0x14
     446:	60 e6       	ldi	r22, 0x60	; 96
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	c8 01       	movw	r24, r16
     44c:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	64 96       	adiw	r28, 0x14	; 20
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	08 95       	ret

00000472 <ESP8266_Begin>:
     472:	cf 93       	push	r28
     474:	c5 e0       	ldi	r28, 0x05	; 5
     476:	60 e6       	ldi	r22, 0x60	; 96
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	82 e8       	ldi	r24, 0x82	; 130
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
     482:	81 11       	cpse	r24, r1
     484:	0a c0       	rjmp	.+20     	; 0x49a <ESP8266_Begin+0x28>
     486:	60 e6       	ldi	r22, 0x60	; 96
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	87 e8       	ldi	r24, 0x87	; 135
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
     492:	81 11       	cpse	r24, r1
     494:	02 c0       	rjmp	.+4      	; 0x49a <ESP8266_Begin+0x28>
     496:	c1 50       	subi	r28, 0x01	; 1
     498:	71 f7       	brne	.-36     	; 0x476 <ESP8266_Begin+0x4>
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <ESP8266_WIFIMode>:

bool ESP8266_WIFIMode(uint8_t _mode)
{
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	64 97       	sbiw	r28, 0x14	; 20
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
	char _atCommand[20];
	memset(_atCommand, 0, 20);
     4b6:	8e 01       	movw	r16, r28
     4b8:	0f 5f       	subi	r16, 0xFF	; 255
     4ba:	1f 4f       	sbci	r17, 0xFF	; 255
     4bc:	94 e1       	ldi	r25, 0x14	; 20
     4be:	f8 01       	movw	r30, r16
     4c0:	11 92       	st	Z+, r1
     4c2:	9a 95       	dec	r25
     4c4:	e9 f7       	brne	.-6      	; 0x4c0 <ESP8266_WIFIMode+0x22>
	sprintf(_atCommand, "AT+CWMODE=%d", _mode);
     4c6:	1f 92       	push	r1
     4c8:	8f 93       	push	r24
     4ca:	88 e9       	ldi	r24, 0x98	; 152
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	9f 93       	push	r25
     4d0:	8f 93       	push	r24
     4d2:	1f 93       	push	r17
     4d4:	0f 93       	push	r16
     4d6:	0e 94 66 07 	call	0xecc	; 0xecc <sprintf>
	_atCommand[19] = 0;
     4da:	1c 8a       	std	Y+20, r1	; 0x14
	return SendATandExpectResponse(_atCommand, "\r\nOK\r\n");
     4dc:	60 e6       	ldi	r22, 0x60	; 96
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	c8 01       	movw	r24, r16
     4e2:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
}
     4f2:	64 96       	adiw	r28, 0x14	; 20
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	f8 94       	cli
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	08 95       	ret

00000508 <ESP8266_JoinAccessPoint>:

uint8_t ESP8266_JoinAccessPoint(char* _SSID, char* _PASSWORD)
{
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
     514:	ec 97       	sbiw	r28, 0x3c	; 60
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	de bf       	out	0x3e, r29	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	cd bf       	out	0x3d, r28	; 61
	char _atCommand[60];
	memset(_atCommand, 0, 60);
     520:	8e 01       	movw	r16, r28
     522:	0f 5f       	subi	r16, 0xFF	; 255
     524:	1f 4f       	sbci	r17, 0xFF	; 255
     526:	2c e3       	ldi	r18, 0x3C	; 60
     528:	f8 01       	movw	r30, r16
     52a:	11 92       	st	Z+, r1
     52c:	2a 95       	dec	r18
     52e:	e9 f7       	brne	.-6      	; 0x52a <ESP8266_JoinAccessPoint+0x22>
	sprintf(_atCommand, "AT+CWJAP=\"%s\",\"%s\"", _SSID, _PASSWORD);
     530:	7f 93       	push	r23
     532:	6f 93       	push	r22
     534:	9f 93       	push	r25
     536:	8f 93       	push	r24
     538:	85 ea       	ldi	r24, 0xA5	; 165
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	9f 93       	push	r25
     53e:	8f 93       	push	r24
     540:	1f 93       	push	r17
     542:	0f 93       	push	r16
     544:	0e 94 66 07 	call	0xecc	; 0xecc <sprintf>
	_atCommand[59] = 0;
     548:	1c ae       	std	Y+60, r1	; 0x3c
	if(SendATandExpectResponse(_atCommand, "\r\nWIFI CONNECTED\r\n"))
     54a:	68 eb       	ldi	r22, 0xB8	; 184
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	c8 01       	movw	r24, r16
     550:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	de bf       	out	0x3e, r29	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	81 11       	cpse	r24, r1
     560:	22 c0       	rjmp	.+68     	; 0x5a6 <ESP8266_JoinAccessPoint+0x9e>
	return ESP8266_WIFI_CONNECTED;
	else{
		if(strstr(RESPONSE_BUFFER, "+CWJAP:1"))
     562:	6b ec       	ldi	r22, 0xCB	; 203
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	8d e1       	ldi	r24, 0x1D	; 29
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	0e 94 4c 07 	call	0xe98	; 0xe98 <strstr>
     56e:	89 2b       	or	r24, r25
     570:	e1 f4       	brne	.+56     	; 0x5aa <ESP8266_JoinAccessPoint+0xa2>
		return ESP8266_CONNECTION_TIMEOUT;
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:2"))
     572:	64 ed       	ldi	r22, 0xD4	; 212
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	8d e1       	ldi	r24, 0x1D	; 29
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 4c 07 	call	0xe98	; 0xe98 <strstr>
     57e:	89 2b       	or	r24, r25
     580:	b1 f4       	brne	.+44     	; 0x5ae <ESP8266_JoinAccessPoint+0xa6>
		return ESP8266_WRONG_PASSWORD;
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:3"))
     582:	6d ed       	ldi	r22, 0xDD	; 221
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	8d e1       	ldi	r24, 0x1D	; 29
     588:	92 e0       	ldi	r25, 0x02	; 2
     58a:	0e 94 4c 07 	call	0xe98	; 0xe98 <strstr>
     58e:	89 2b       	or	r24, r25
     590:	81 f4       	brne	.+32     	; 0x5b2 <ESP8266_JoinAccessPoint+0xaa>
		return ESP8266_NOT_FOUND_TARGET_AP;
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:4"))
     592:	66 ee       	ldi	r22, 0xE6	; 230
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	8d e1       	ldi	r24, 0x1D	; 29
     598:	92 e0       	ldi	r25, 0x02	; 2
     59a:	0e 94 4c 07 	call	0xe98	; 0xe98 <strstr>
     59e:	89 2b       	or	r24, r25
     5a0:	51 f4       	brne	.+20     	; 0x5b6 <ESP8266_JoinAccessPoint+0xae>
		return ESP8266_CONNECTION_FAILED;
		else
		return ESP8266_JOIN_UNKNOWN_ERROR;
     5a2:	85 e0       	ldi	r24, 0x05	; 5
     5a4:	09 c0       	rjmp	.+18     	; 0x5b8 <ESP8266_JoinAccessPoint+0xb0>
	char _atCommand[60];
	memset(_atCommand, 0, 60);
	sprintf(_atCommand, "AT+CWJAP=\"%s\",\"%s\"", _SSID, _PASSWORD);
	_atCommand[59] = 0;
	if(SendATandExpectResponse(_atCommand, "\r\nWIFI CONNECTED\r\n"))
	return ESP8266_WIFI_CONNECTED;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <ESP8266_JoinAccessPoint+0xb0>
	else{
		if(strstr(RESPONSE_BUFFER, "+CWJAP:1"))
		return ESP8266_CONNECTION_TIMEOUT;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <ESP8266_JoinAccessPoint+0xb0>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:2"))
		return ESP8266_WRONG_PASSWORD;
     5ae:	82 e0       	ldi	r24, 0x02	; 2
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <ESP8266_JoinAccessPoint+0xb0>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:3"))
		return ESP8266_NOT_FOUND_TARGET_AP;
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <ESP8266_JoinAccessPoint+0xb0>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:4"))
		return ESP8266_CONNECTION_FAILED;
     5b6:	84 e0       	ldi	r24, 0x04	; 4
		else
		return ESP8266_JOIN_UNKNOWN_ERROR;
	}
}
     5b8:	ec 96       	adiw	r28, 0x3c	; 60
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	08 95       	ret

000005ce <ESP8266_connected>:

uint8_t ESP8266_connected()
{
	SendATandExpectResponse("AT+CIPSTATUS", "\r\nOK\r\n");
     5ce:	60 e6       	ldi	r22, 0x60	; 96
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	8f ee       	ldi	r24, 0xEF	; 239
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
	if(strstr(RESPONSE_BUFFER, "STATUS:2"))
     5da:	6c ef       	ldi	r22, 0xFC	; 252
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	8d e1       	ldi	r24, 0x1D	; 29
     5e0:	92 e0       	ldi	r25, 0x02	; 2
     5e2:	0e 94 4c 07 	call	0xe98	; 0xe98 <strstr>
     5e6:	89 2b       	or	r24, r25
     5e8:	d1 f4       	brne	.+52     	; 0x61e <ESP8266_connected+0x50>
	return ESP8266_CONNECTED_TO_AP;
	else if(strstr(RESPONSE_BUFFER, "STATUS:3"))
     5ea:	65 e0       	ldi	r22, 0x05	; 5
     5ec:	71 e0       	ldi	r23, 0x01	; 1
     5ee:	8d e1       	ldi	r24, 0x1D	; 29
     5f0:	92 e0       	ldi	r25, 0x02	; 2
     5f2:	0e 94 4c 07 	call	0xe98	; 0xe98 <strstr>
     5f6:	89 2b       	or	r24, r25
     5f8:	a1 f4       	brne	.+40     	; 0x622 <ESP8266_connected+0x54>
	return ESP8266_CREATED_TRANSMISSION;
	else if(strstr(RESPONSE_BUFFER, "STATUS:4"))
     5fa:	6e e0       	ldi	r22, 0x0E	; 14
     5fc:	71 e0       	ldi	r23, 0x01	; 1
     5fe:	8d e1       	ldi	r24, 0x1D	; 29
     600:	92 e0       	ldi	r25, 0x02	; 2
     602:	0e 94 4c 07 	call	0xe98	; 0xe98 <strstr>
     606:	89 2b       	or	r24, r25
     608:	71 f4       	brne	.+28     	; 0x626 <ESP8266_connected+0x58>
	return ESP8266_TRANSMISSION_DISCONNECTED;
	else if(strstr(RESPONSE_BUFFER, "STATUS:5"))
     60a:	67 e1       	ldi	r22, 0x17	; 23
     60c:	71 e0       	ldi	r23, 0x01	; 1
     60e:	8d e1       	ldi	r24, 0x1D	; 29
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	0e 94 4c 07 	call	0xe98	; 0xe98 <strstr>
     616:	89 2b       	or	r24, r25
     618:	41 f4       	brne	.+16     	; 0x62a <ESP8266_connected+0x5c>
	return ESP8266_NOT_CONNECTED_TO_AP;
	else
	return ESP8266_CONNECT_UNKNOWN_ERROR;
     61a:	84 e0       	ldi	r24, 0x04	; 4
     61c:	08 95       	ret

uint8_t ESP8266_connected()
{
	SendATandExpectResponse("AT+CIPSTATUS", "\r\nOK\r\n");
	if(strstr(RESPONSE_BUFFER, "STATUS:2"))
	return ESP8266_CONNECTED_TO_AP;
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	08 95       	ret
	else if(strstr(RESPONSE_BUFFER, "STATUS:3"))
	return ESP8266_CREATED_TRANSMISSION;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	08 95       	ret
	else if(strstr(RESPONSE_BUFFER, "STATUS:4"))
	return ESP8266_TRANSMISSION_DISCONNECTED;
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	08 95       	ret
	else if(strstr(RESPONSE_BUFFER, "STATUS:5"))
	return ESP8266_NOT_CONNECTED_TO_AP;
     62a:	83 e0       	ldi	r24, 0x03	; 3
	else
	return ESP8266_CONNECT_UNKNOWN_ERROR;
}
     62c:	08 95       	ret

0000062e <ESP8266_Start>:

uint8_t ESP8266_Start(uint8_t _ConnectionNumber, char* Domain, char* Port)
{
     62e:	df 92       	push	r13
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	ec 97       	sbiw	r28, 0x3c	; 60
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	d8 2e       	mov	r13, r24
     64e:	16 2f       	mov	r17, r22
     650:	07 2f       	mov	r16, r23
     652:	f4 2e       	mov	r15, r20
     654:	e5 2e       	mov	r14, r21
	bool _startResponse;
	char _atCommand[60];
	memset(_atCommand, 0, 60);
     656:	fe 01       	movw	r30, r28
     658:	31 96       	adiw	r30, 0x01	; 1
     65a:	8c e3       	ldi	r24, 0x3C	; 60
     65c:	df 01       	movw	r26, r30
     65e:	1d 92       	st	X+, r1
     660:	8a 95       	dec	r24
     662:	e9 f7       	brne	.-6      	; 0x65e <ESP8266_Start+0x30>
	_atCommand[59] = 0;

	if(SendATandExpectResponse("AT+CIPMUX?", "CIPMUX:0"))
     664:	60 e2       	ldi	r22, 0x20	; 32
     666:	71 e0       	ldi	r23, 0x01	; 1
     668:	89 e2       	ldi	r24, 0x29	; 41
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
     670:	88 23       	and	r24, r24
     672:	a1 f0       	breq	.+40     	; 0x69c <ESP8266_Start+0x6e>
	sprintf(_atCommand, "AT+CIPSTART=\"TCP\",\"%s\",%s", Domain, Port);
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	84 e3       	ldi	r24, 0x34	; 52
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	ce 01       	movw	r24, r28
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	9f 93       	push	r25
     68a:	8f 93       	push	r24
     68c:	0e 94 66 07 	call	0xecc	; 0xecc <sprintf>
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61
     69a:	15 c0       	rjmp	.+42     	; 0x6c6 <ESP8266_Start+0x98>
	else
	sprintf(_atCommand, "AT+CIPSTART=\"%d\",\"TCP\",\"%s\",%s", _ConnectionNumber, Domain, Port);
     69c:	ef 92       	push	r14
     69e:	ff 92       	push	r15
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	1f 92       	push	r1
     6a6:	df 92       	push	r13
     6a8:	8e e4       	ldi	r24, 0x4E	; 78
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	9f 93       	push	r25
     6ae:	8f 93       	push	r24
     6b0:	ce 01       	movw	r24, r28
     6b2:	01 96       	adiw	r24, 0x01	; 1
     6b4:	9f 93       	push	r25
     6b6:	8f 93       	push	r24
     6b8:	0e 94 66 07 	call	0xecc	; 0xecc <sprintf>
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61

	_startResponse = SendATandExpectResponse(_atCommand, "CONNECT\r\n");
     6c6:	6d e6       	ldi	r22, 0x6D	; 109
     6c8:	71 e0       	ldi	r23, 0x01	; 1
     6ca:	ce 01       	movw	r24, r28
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
	if(!_startResponse)
     6d2:	81 11       	cpse	r24, r1
     6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <ESP8266_Start+0xb4>
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
     6d6:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <Response_Status>
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	21 f0       	breq	.+8      	; 0x6e6 <ESP8266_Start+0xb8>
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
     6de:	85 e0       	ldi	r24, 0x05	; 5
     6e0:	03 c0       	rjmp	.+6      	; 0x6e8 <ESP8266_Start+0xba>
	}
	return ESP8266_RESPONSE_FINISHED;
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <ESP8266_Start+0xba>

	_startResponse = SendATandExpectResponse(_atCommand, "CONNECT\r\n");
	if(!_startResponse)
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
		return ESP8266_RESPONSE_TIMEOUT;
     6e6:	82 e0       	ldi	r24, 0x02	; 2
		return ESP8266_RESPONSE_ERROR;
	}
	return ESP8266_RESPONSE_FINISHED;
}
     6e8:	ec 96       	adiw	r28, 0x3c	; 60
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	08 95       	ret

00000704 <ESP8266_Send>:

uint8_t ESP8266_Send(char* Data)
{
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	64 97       	sbiw	r28, 0x14	; 20
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	8c 01       	movw	r16, r24
	char _atCommand[20];
	memset(_atCommand, 0, 20);
     722:	ce 01       	movw	r24, r28
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	7c 01       	movw	r14, r24
     728:	84 e1       	ldi	r24, 0x14	; 20
     72a:	f7 01       	movw	r30, r14
     72c:	11 92       	st	Z+, r1
     72e:	8a 95       	dec	r24
     730:	e9 f7       	brne	.-6      	; 0x72c <ESP8266_Send+0x28>
	sprintf(_atCommand, "AT+CIPSEND=%d", (strlen(Data)+2));
     732:	f8 01       	movw	r30, r16
     734:	01 90       	ld	r0, Z+
     736:	00 20       	and	r0, r0
     738:	e9 f7       	brne	.-6      	; 0x734 <ESP8266_Send+0x30>
     73a:	cf 01       	movw	r24, r30
     73c:	80 1b       	sub	r24, r16
     73e:	91 0b       	sbc	r25, r17
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	87 e7       	ldi	r24, 0x77	; 119
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	9f 93       	push	r25
     74c:	8f 93       	push	r24
     74e:	ff 92       	push	r15
     750:	ef 92       	push	r14
     752:	0e 94 66 07 	call	0xecc	; 0xecc <sprintf>
	_atCommand[19] = 0;
     756:	1c 8a       	std	Y+20, r1	; 0x14
	SendATandExpectResponse(_atCommand, "\r\nOK\r\n>");
     758:	65 e8       	ldi	r22, 0x85	; 133
     75a:	71 e0       	ldi	r23, 0x01	; 1
     75c:	c7 01       	movw	r24, r14
     75e:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
	if(!SendATandExpectResponse(Data, "\r\nSEND OK\r\n"))
     762:	6d e8       	ldi	r22, 0x8D	; 141
     764:	71 e0       	ldi	r23, 0x01	; 1
     766:	c8 01       	movw	r24, r16
     768:	0e 94 b8 01 	call	0x370	; 0x370 <SendATandExpectResponse>
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	81 11       	cpse	r24, r1
     77a:	06 c0       	rjmp	.+12     	; 0x788 <ESP8266_Send+0x84>
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
     77c:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <Response_Status>
     780:	82 30       	cpi	r24, 0x02	; 2
     782:	21 f0       	breq	.+8      	; 0x78c <ESP8266_Send+0x88>
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
     784:	85 e0       	ldi	r24, 0x05	; 5
     786:	03 c0       	rjmp	.+6      	; 0x78e <ESP8266_Send+0x8a>
	}
	return ESP8266_RESPONSE_FINISHED;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	01 c0       	rjmp	.+2      	; 0x78e <ESP8266_Send+0x8a>
	_atCommand[19] = 0;
	SendATandExpectResponse(_atCommand, "\r\nOK\r\n>");
	if(!SendATandExpectResponse(Data, "\r\nSEND OK\r\n"))
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
		return ESP8266_RESPONSE_TIMEOUT;
     78c:	82 e0       	ldi	r24, 0x02	; 2
		return ESP8266_RESPONSE_ERROR;
	}
	return ESP8266_RESPONSE_FINISHED;
}
     78e:	64 96       	adiw	r28, 0x14	; 20
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	08 95       	ret

000007a8 <main>:
#include "ESP8266.h"
#include "TempAndHumidity.h"



int main(void) {
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	c6 59       	subi	r28, 0x96	; 150
     7b2:	d1 09       	sbc	r29, r1
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	de bf       	out	0x3e, r29	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	cd bf       	out	0x3d, r28	; 61
	
	/*#ifdef SEND_DEMO
	uint8_t Sample = 0;
	#endif*/

	USART_Init(115200);						
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	72 ec       	ldi	r23, 0xC2	; 194
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 8f 04 	call	0x91e	; 0x91e <USART_Init>
	sei();									
     7ca:	78 94       	sei

	while (!ESP8266_Begin());
     7cc:	0e 94 39 02 	call	0x472	; 0x472 <ESP8266_Begin>
     7d0:	88 23       	and	r24, r24
     7d2:	e1 f3       	breq	.-8      	; 0x7cc <main+0x24>
	
	ESP8266_WIFIMode(BOTH_STATION_AND_ACCESPOINT);	// 3 = Both (AP and STA) 
     7d4:	83 e0       	ldi	r24, 0x03	; 3
     7d6:	0e 94 4f 02 	call	0x49e	; 0x49e <ESP8266_WIFIMode>
	ESP8266_ConnectionMode(SINGLE);					// 0 = Single; 1 = Multi 
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	0e 94 04 02 	call	0x408	; 0x408 <ESP8266_ConnectionMode>
	ESP8266_ApplicationMode(NORMAL);				// 0 = Normal Mode; 1 = Transperant Mode
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	0e 94 cf 01 	call	0x39e	; 0x39e <ESP8266_ApplicationMode>
	 
	if (ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP) ESP8266_JoinAccessPoint(SSID, PASSWORD);
     7e6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <ESP8266_connected>
     7ea:	83 30       	cpi	r24, 0x03	; 3
     7ec:	31 f4       	brne	.+12     	; 0x7fa <main+0x52>
     7ee:	69 e9       	ldi	r22, 0x99	; 153
     7f0:	71 e0       	ldi	r23, 0x01	; 1
     7f2:	83 ea       	ldi	r24, 0xA3	; 163
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	0e 94 84 02 	call	0x508	; 0x508 <ESP8266_JoinAccessPoint>
	ESP8266_Start(0, DOMAIN, PORT);
     7fa:	43 eb       	ldi	r20, 0xB3	; 179
     7fc:	51 e0       	ldi	r21, 0x01	; 1
     7fe:	66 eb       	ldi	r22, 0xB6	; 182
     800:	71 e0       	ldi	r23, 0x01	; 1
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	0e 94 17 03 	call	0x62e	; 0x62e <ESP8266_Start>
		//while (!(ADCSRA & _BV(ADIF)));				
		
		//_delay_ms(500);

		//#ifdef SEND_DEMO
		memset(WiFiBuffer, 0, 150);
     808:	0f 2e       	mov	r0, r31
     80a:	f6 e9       	ldi	r31, 0x96	; 150
     80c:	9f 2e       	mov	r9, r31
     80e:	f0 2d       	mov	r31, r0
     810:	8e 01       	movw	r16, r28
     812:	0f 5f       	subi	r16, 0xFF	; 255
     814:	1f 4f       	sbci	r17, 0xFF	; 255
		sprintf(WiFiBuffer, "GET /update?api_key=%s&field1=%.2d&field2=%.2d&field3=%d", API_WRITE_KEY, integralTemp, integralRh, 0);
     816:	0f 2e       	mov	r0, r31
     818:	f9 ec       	ldi	r31, 0xC9	; 201
     81a:	cf 2e       	mov	r12, r31
     81c:	f1 e0       	ldi	r31, 0x01	; 1
     81e:	df 2e       	mov	r13, r31
     820:	f0 2d       	mov	r31, r0
     822:	0f 2e       	mov	r0, r31
     824:	fa ed       	ldi	r31, 0xDA	; 218
     826:	ef 2e       	mov	r14, r31
     828:	f1 e0       	ldi	r31, 0x01	; 1
     82a:	ff 2e       	mov	r15, r31
     82c:	f0 2d       	mov	r31, r0
	 
	if (ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP) ESP8266_JoinAccessPoint(SSID, PASSWORD);
	ESP8266_Start(0, DOMAIN, PORT);
	
	while (1) {
		connectStatus = ESP8266_connected();
     82e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <ESP8266_connected>
		if (connectStatus == ESP8266_NOT_CONNECTED_TO_AP) ESP8266_JoinAccessPoint(SSID, PASSWORD);
     832:	83 30       	cpi	r24, 0x03	; 3
     834:	39 f4       	brne	.+14     	; 0x844 <main+0x9c>
     836:	69 e9       	ldi	r22, 0x99	; 153
     838:	71 e0       	ldi	r23, 0x01	; 1
     83a:	83 ea       	ldi	r24, 0xA3	; 163
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 84 02 	call	0x508	; 0x508 <ESP8266_JoinAccessPoint>
     842:	09 c0       	rjmp	.+18     	; 0x856 <main+0xae>
		if (connectStatus == ESP8266_TRANSMISSION_DISCONNECTED) ESP8266_Start(0, DOMAIN, PORT);
     844:	82 30       	cpi	r24, 0x02	; 2
     846:	39 f4       	brne	.+14     	; 0x856 <main+0xae>
     848:	43 eb       	ldi	r20, 0xB3	; 179
     84a:	51 e0       	ldi	r21, 0x01	; 1
     84c:	66 eb       	ldi	r22, 0xB6	; 182
     84e:	71 e0       	ldi	r23, 0x01	; 1
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	0e 94 17 03 	call	0x62e	; 0x62e <ESP8266_Start>
				
		Request();			
     856:	0e 94 61 04 	call	0x8c2	; 0x8c2 <Request>
		Response();				
     85a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <Response>
		integralRh = Receive_data();	
     85e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <Receive_data>
     862:	a8 2e       	mov	r10, r24
		decimalRh = Receive_data();	
     864:	0e 94 74 04 	call	0x8e8	; 0x8e8 <Receive_data>
		integralTemp = Receive_data();	
     868:	0e 94 74 04 	call	0x8e8	; 0x8e8 <Receive_data>
     86c:	b8 2e       	mov	r11, r24
		decimalTemp = Receive_data();	
     86e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <Receive_data>
		checksum = Receive_data();
     872:	0e 94 74 04 	call	0x8e8	; 0x8e8 <Receive_data>
		
		ADCSRA |= _BV(ADSC);
     876:	36 9a       	sbi	0x06, 6	; 6
		//while (!(ADCSRA & _BV(ADIF)));				
		
		//_delay_ms(500);

		//#ifdef SEND_DEMO
		memset(WiFiBuffer, 0, 150);
     878:	f8 01       	movw	r30, r16
     87a:	29 2d       	mov	r18, r9
     87c:	11 92       	st	Z+, r1
     87e:	2a 95       	dec	r18
     880:	e9 f7       	brne	.-6      	; 0x87c <main+0xd4>
		sprintf(WiFiBuffer, "GET /update?api_key=%s&field1=%.2d&field2=%.2d&field3=%d", API_WRITE_KEY, integralTemp, integralRh, 0);
     882:	1f 92       	push	r1
     884:	1f 92       	push	r1
     886:	1f 92       	push	r1
     888:	af 92       	push	r10
     88a:	1f 92       	push	r1
     88c:	bf 92       	push	r11
     88e:	df 92       	push	r13
     890:	cf 92       	push	r12
     892:	ff 92       	push	r15
     894:	ef 92       	push	r14
     896:	1f 93       	push	r17
     898:	0f 93       	push	r16
     89a:	0e 94 66 07 	call	0xecc	; 0xecc <sprintf>
		ESP8266_Send(WiFiBuffer);
     89e:	c8 01       	movw	r24, r16
     8a0:	0e 94 82 03 	call	0x704	; 0x704 <ESP8266_Send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8a4:	8f ef       	ldi	r24, 0xFF	; 255
     8a6:	91 e1       	ldi	r25, 0x11	; 17
     8a8:	ea e7       	ldi	r30, 0x7A	; 122
     8aa:	81 50       	subi	r24, 0x01	; 1
     8ac:	90 40       	sbci	r25, 0x00	; 0
     8ae:	e0 40       	sbci	r30, 0x00	; 0
     8b0:	e1 f7       	brne	.-8      	; 0x8aa <main+0x102>
     8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <main+0x10c>
     8b4:	00 00       	nop
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	b6 cf       	rjmp	.-148    	; 0x82e <main+0x86>

000008c2 <Request>:



void Request()						/* Microcontroller send start pulse or request */
{
	DDRD |= _BV(DHT11_PIN);			// Request is sent from MCU PIN
     8c2:	8a 9a       	sbi	0x11, 2	; 17
	PORTD |= _BV(DHT11_PIN);
     8c4:	92 9a       	sbi	0x12, 2	; 18
	PORTD &= ~_BV(DHT11_PIN);		/* set to low pin, pull down */
     8c6:	92 98       	cbi	0x12, 2	; 18
     8c8:	8f e3       	ldi	r24, 0x3F	; 63
     8ca:	9c e9       	ldi	r25, 0x9C	; 156
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	f1 f7       	brne	.-4      	; 0x8cc <Request+0xa>
     8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <Request+0x10>
     8d2:	00 00       	nop
	_delay_ms(20);					/* wait for 20ms */
	PORTD |= _BV(DHT11_PIN);		/* set to high pin, pull up */
     8d4:	92 9a       	sbi	0x12, 2	; 18
     8d6:	08 95       	ret

000008d8 <Response>:
}

void Response()						/* receive response from DHT11 */
{
	DDRD &= ~_BV(DHT11_PIN);				// explicitly pull up PIN
     8d8:	8a 98       	cbi	0x11, 2	; 17
	while(PIND & _BV(DHT11_PIN));			// check to see if state changed from high to low
     8da:	82 99       	sbic	0x10, 2	; 16
     8dc:	fe cf       	rjmp	.-4      	; 0x8da <Response+0x2>
	while((PIND & _BV(DHT11_PIN)) == 0);	// check if pulled down voltage is equal to zero
     8de:	82 9b       	sbis	0x10, 2	; 16
     8e0:	fe cf       	rjmp	.-4      	; 0x8de <Response+0x6>
	while(PIND & _BV(DHT11_PIN));			// check to see if state change from low to high
     8e2:	82 99       	sbic	0x10, 2	; 16
     8e4:	fe cf       	rjmp	.-4      	; 0x8e2 <Response+0xa>
}
     8e6:	08 95       	ret

000008e8 <Receive_data>:

uint8_t Receive_data()							/* receive data */
{	
     8e8:	88 e0       	ldi	r24, 0x08	; 8
	/*
	The data frame is of total 40 bits long, it contains 5 segments and each segment
	is 8-bit long. We check each bit if it is high or low
	*/
	for (uint8_t q=0; q<8; q++) {
		while((PIND &  _BV(DHT11_PIN)) == 0);/* check received bit 0 or 1, if pulled up */
     8ea:	82 9b       	sbis	0x10, 2	; 16
     8ec:	fe cf       	rjmp	.-4      	; 0x8ea <Receive_data+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ee:	90 ea       	ldi	r25, 0xA0	; 160
     8f0:	9a 95       	dec	r25
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <Receive_data+0x8>
		_delay_us(60);
		/* if high pulse is greater than 30ms */
		if(PIND & _BV(DHT11_PIN)) {
     8f4:	82 9b       	sbis	0x10, 2	; 16
     8f6:	07 c0       	rjmp	.+14     	; 0x906 <Receive_data+0x1e>
			/* then it is logic HIGH */
			c = (c << 1) | (0x01);
     8f8:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <c>
     8fc:	99 0f       	add	r25, r25
     8fe:	91 60       	ori	r25, 0x01	; 1
     900:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <c>
     904:	05 c0       	rjmp	.+10     	; 0x910 <Receive_data+0x28>
		} else {
			/* otherwise it is logic LOW */
			c = (c << 1);
     906:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <c>
     90a:	99 0f       	add	r25, r25
     90c:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <c>
		}								
		while(PIND & _BV(DHT11_PIN));
     910:	82 99       	sbic	0x10, 2	; 16
     912:	fe cf       	rjmp	.-4      	; 0x910 <Receive_data+0x28>
     914:	81 50       	subi	r24, 0x01	; 1
{	
	/*
	The data frame is of total 40 bits long, it contains 5 segments and each segment
	is 8-bit long. We check each bit if it is high or low
	*/
	for (uint8_t q=0; q<8; q++) {
     916:	49 f7       	brne	.-46     	; 0x8ea <Receive_data+0x2>
			c = (c << 1);
		}								
		while(PIND & _BV(DHT11_PIN));
	}
	return c;
     918:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <c>
     91c:	08 95       	ret

0000091e <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return(UDR);									/* Get and return received data */ 
}
     91e:	59 9a       	sbi	0x0b, 1	; 11
     920:	2a b1       	in	r18, 0x0a	; 10
     922:	28 69       	ori	r18, 0x98	; 152
     924:	2a b9       	out	0x0a, r18	; 10
     926:	20 b5       	in	r18, 0x20	; 32
     928:	26 68       	ori	r18, 0x86	; 134
     92a:	20 bd       	out	0x20, r18	; 32
     92c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__floatunsisf>
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	51 e4       	ldi	r21, 0x41	; 65
     938:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
     93c:	9b 01       	movw	r18, r22
     93e:	ac 01       	movw	r20, r24
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	81 ee       	ldi	r24, 0xE1	; 225
     946:	9a e4       	ldi	r25, 0x4A	; 74
     948:	0e 94 33 05 	call	0xa66	; 0xa66 <__divsf3>
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	40 e8       	ldi	r20, 0x80	; 128
     952:	5f e3       	ldi	r21, 0x3F	; 63
     954:	0e 94 c6 04 	call	0x98c	; 0x98c <__subsf3>
     958:	0e 94 d6 06 	call	0xdac	; 0xdac <round>
     95c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fixsfsi>
     960:	69 b9       	out	0x09, r22	; 9
     962:	70 bd       	out	0x20, r23	; 32
     964:	08 95       	ret

00000966 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR = data;										/* Write data to be transmitting in UDR */
     966:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     968:	5d 9b       	sbis	0x0b, 5	; 11
     96a:	fe cf       	rjmp	.-4      	; 0x968 <USART_TxChar+0x2>
}
     96c:	08 95       	ret

0000096e <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	ec 01       	movw	r28, r24
	int i=0;																	
	while (str[i]!=0)
     974:	88 81       	ld	r24, Y
     976:	88 23       	and	r24, r24
     978:	31 f0       	breq	.+12     	; 0x986 <USART_SendString+0x18>
     97a:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
     97c:	0e 94 b3 04 	call	0x966	; 0x966 <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
     980:	89 91       	ld	r24, Y+
     982:	81 11       	cpse	r24, r1
     984:	fb cf       	rjmp	.-10     	; 0x97c <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <__subsf3>:
     98c:	50 58       	subi	r21, 0x80	; 128

0000098e <__addsf3>:
     98e:	bb 27       	eor	r27, r27
     990:	aa 27       	eor	r26, r26
     992:	0e 94 de 04 	call	0x9bc	; 0x9bc <__addsf3x>
     996:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__fp_round>
     99a:	0e 94 21 06 	call	0xc42	; 0xc42 <__fp_pscA>
     99e:	38 f0       	brcs	.+14     	; 0x9ae <__addsf3+0x20>
     9a0:	0e 94 28 06 	call	0xc50	; 0xc50 <__fp_pscB>
     9a4:	20 f0       	brcs	.+8      	; 0x9ae <__addsf3+0x20>
     9a6:	39 f4       	brne	.+14     	; 0x9b6 <__addsf3+0x28>
     9a8:	9f 3f       	cpi	r25, 0xFF	; 255
     9aa:	19 f4       	brne	.+6      	; 0x9b2 <__addsf3+0x24>
     9ac:	26 f4       	brtc	.+8      	; 0x9b6 <__addsf3+0x28>
     9ae:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__fp_nan>
     9b2:	0e f4       	brtc	.+2      	; 0x9b6 <__addsf3+0x28>
     9b4:	e0 95       	com	r30
     9b6:	e7 fb       	bst	r30, 7
     9b8:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_inf>

000009bc <__addsf3x>:
     9bc:	e9 2f       	mov	r30, r25
     9be:	0e 94 40 06 	call	0xc80	; 0xc80 <__fp_split3>
     9c2:	58 f3       	brcs	.-42     	; 0x99a <__addsf3+0xc>
     9c4:	ba 17       	cp	r27, r26
     9c6:	62 07       	cpc	r22, r18
     9c8:	73 07       	cpc	r23, r19
     9ca:	84 07       	cpc	r24, r20
     9cc:	95 07       	cpc	r25, r21
     9ce:	20 f0       	brcs	.+8      	; 0x9d8 <__addsf3x+0x1c>
     9d0:	79 f4       	brne	.+30     	; 0x9f0 <__addsf3x+0x34>
     9d2:	a6 f5       	brtc	.+104    	; 0xa3c <__addsf3x+0x80>
     9d4:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_zero>
     9d8:	0e f4       	brtc	.+2      	; 0x9dc <__addsf3x+0x20>
     9da:	e0 95       	com	r30
     9dc:	0b 2e       	mov	r0, r27
     9de:	ba 2f       	mov	r27, r26
     9e0:	a0 2d       	mov	r26, r0
     9e2:	0b 01       	movw	r0, r22
     9e4:	b9 01       	movw	r22, r18
     9e6:	90 01       	movw	r18, r0
     9e8:	0c 01       	movw	r0, r24
     9ea:	ca 01       	movw	r24, r20
     9ec:	a0 01       	movw	r20, r0
     9ee:	11 24       	eor	r1, r1
     9f0:	ff 27       	eor	r31, r31
     9f2:	59 1b       	sub	r21, r25
     9f4:	99 f0       	breq	.+38     	; 0xa1c <__addsf3x+0x60>
     9f6:	59 3f       	cpi	r21, 0xF9	; 249
     9f8:	50 f4       	brcc	.+20     	; 0xa0e <__addsf3x+0x52>
     9fa:	50 3e       	cpi	r21, 0xE0	; 224
     9fc:	68 f1       	brcs	.+90     	; 0xa58 <__addsf3x+0x9c>
     9fe:	1a 16       	cp	r1, r26
     a00:	f0 40       	sbci	r31, 0x00	; 0
     a02:	a2 2f       	mov	r26, r18
     a04:	23 2f       	mov	r18, r19
     a06:	34 2f       	mov	r19, r20
     a08:	44 27       	eor	r20, r20
     a0a:	58 5f       	subi	r21, 0xF8	; 248
     a0c:	f3 cf       	rjmp	.-26     	; 0x9f4 <__addsf3x+0x38>
     a0e:	46 95       	lsr	r20
     a10:	37 95       	ror	r19
     a12:	27 95       	ror	r18
     a14:	a7 95       	ror	r26
     a16:	f0 40       	sbci	r31, 0x00	; 0
     a18:	53 95       	inc	r21
     a1a:	c9 f7       	brne	.-14     	; 0xa0e <__addsf3x+0x52>
     a1c:	7e f4       	brtc	.+30     	; 0xa3c <__addsf3x+0x80>
     a1e:	1f 16       	cp	r1, r31
     a20:	ba 0b       	sbc	r27, r26
     a22:	62 0b       	sbc	r22, r18
     a24:	73 0b       	sbc	r23, r19
     a26:	84 0b       	sbc	r24, r20
     a28:	ba f0       	brmi	.+46     	; 0xa58 <__addsf3x+0x9c>
     a2a:	91 50       	subi	r25, 0x01	; 1
     a2c:	a1 f0       	breq	.+40     	; 0xa56 <__addsf3x+0x9a>
     a2e:	ff 0f       	add	r31, r31
     a30:	bb 1f       	adc	r27, r27
     a32:	66 1f       	adc	r22, r22
     a34:	77 1f       	adc	r23, r23
     a36:	88 1f       	adc	r24, r24
     a38:	c2 f7       	brpl	.-16     	; 0xa2a <__addsf3x+0x6e>
     a3a:	0e c0       	rjmp	.+28     	; 0xa58 <__addsf3x+0x9c>
     a3c:	ba 0f       	add	r27, r26
     a3e:	62 1f       	adc	r22, r18
     a40:	73 1f       	adc	r23, r19
     a42:	84 1f       	adc	r24, r20
     a44:	48 f4       	brcc	.+18     	; 0xa58 <__addsf3x+0x9c>
     a46:	87 95       	ror	r24
     a48:	77 95       	ror	r23
     a4a:	67 95       	ror	r22
     a4c:	b7 95       	ror	r27
     a4e:	f7 95       	ror	r31
     a50:	9e 3f       	cpi	r25, 0xFE	; 254
     a52:	08 f0       	brcs	.+2      	; 0xa56 <__addsf3x+0x9a>
     a54:	b0 cf       	rjmp	.-160    	; 0x9b6 <__addsf3+0x28>
     a56:	93 95       	inc	r25
     a58:	88 0f       	add	r24, r24
     a5a:	08 f0       	brcs	.+2      	; 0xa5e <__addsf3x+0xa2>
     a5c:	99 27       	eor	r25, r25
     a5e:	ee 0f       	add	r30, r30
     a60:	97 95       	ror	r25
     a62:	87 95       	ror	r24
     a64:	08 95       	ret

00000a66 <__divsf3>:
     a66:	0e 94 47 05 	call	0xa8e	; 0xa8e <__divsf3x>
     a6a:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__fp_round>
     a6e:	0e 94 28 06 	call	0xc50	; 0xc50 <__fp_pscB>
     a72:	58 f0       	brcs	.+22     	; 0xa8a <__divsf3+0x24>
     a74:	0e 94 21 06 	call	0xc42	; 0xc42 <__fp_pscA>
     a78:	40 f0       	brcs	.+16     	; 0xa8a <__divsf3+0x24>
     a7a:	29 f4       	brne	.+10     	; 0xa86 <__divsf3+0x20>
     a7c:	5f 3f       	cpi	r21, 0xFF	; 255
     a7e:	29 f0       	breq	.+10     	; 0xa8a <__divsf3+0x24>
     a80:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_inf>
     a84:	51 11       	cpse	r21, r1
     a86:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_szero>
     a8a:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__fp_nan>

00000a8e <__divsf3x>:
     a8e:	0e 94 40 06 	call	0xc80	; 0xc80 <__fp_split3>
     a92:	68 f3       	brcs	.-38     	; 0xa6e <__divsf3+0x8>

00000a94 <__divsf3_pse>:
     a94:	99 23       	and	r25, r25
     a96:	b1 f3       	breq	.-20     	; 0xa84 <__divsf3+0x1e>
     a98:	55 23       	and	r21, r21
     a9a:	91 f3       	breq	.-28     	; 0xa80 <__divsf3+0x1a>
     a9c:	95 1b       	sub	r25, r21
     a9e:	55 0b       	sbc	r21, r21
     aa0:	bb 27       	eor	r27, r27
     aa2:	aa 27       	eor	r26, r26
     aa4:	62 17       	cp	r22, r18
     aa6:	73 07       	cpc	r23, r19
     aa8:	84 07       	cpc	r24, r20
     aaa:	38 f0       	brcs	.+14     	; 0xaba <__divsf3_pse+0x26>
     aac:	9f 5f       	subi	r25, 0xFF	; 255
     aae:	5f 4f       	sbci	r21, 0xFF	; 255
     ab0:	22 0f       	add	r18, r18
     ab2:	33 1f       	adc	r19, r19
     ab4:	44 1f       	adc	r20, r20
     ab6:	aa 1f       	adc	r26, r26
     ab8:	a9 f3       	breq	.-22     	; 0xaa4 <__divsf3_pse+0x10>
     aba:	35 d0       	rcall	.+106    	; 0xb26 <__divsf3_pse+0x92>
     abc:	0e 2e       	mov	r0, r30
     abe:	3a f0       	brmi	.+14     	; 0xace <__divsf3_pse+0x3a>
     ac0:	e0 e8       	ldi	r30, 0x80	; 128
     ac2:	32 d0       	rcall	.+100    	; 0xb28 <__divsf3_pse+0x94>
     ac4:	91 50       	subi	r25, 0x01	; 1
     ac6:	50 40       	sbci	r21, 0x00	; 0
     ac8:	e6 95       	lsr	r30
     aca:	00 1c       	adc	r0, r0
     acc:	ca f7       	brpl	.-14     	; 0xac0 <__divsf3_pse+0x2c>
     ace:	2b d0       	rcall	.+86     	; 0xb26 <__divsf3_pse+0x92>
     ad0:	fe 2f       	mov	r31, r30
     ad2:	29 d0       	rcall	.+82     	; 0xb26 <__divsf3_pse+0x92>
     ad4:	66 0f       	add	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	88 1f       	adc	r24, r24
     ada:	bb 1f       	adc	r27, r27
     adc:	26 17       	cp	r18, r22
     ade:	37 07       	cpc	r19, r23
     ae0:	48 07       	cpc	r20, r24
     ae2:	ab 07       	cpc	r26, r27
     ae4:	b0 e8       	ldi	r27, 0x80	; 128
     ae6:	09 f0       	breq	.+2      	; 0xaea <__divsf3_pse+0x56>
     ae8:	bb 0b       	sbc	r27, r27
     aea:	80 2d       	mov	r24, r0
     aec:	bf 01       	movw	r22, r30
     aee:	ff 27       	eor	r31, r31
     af0:	93 58       	subi	r25, 0x83	; 131
     af2:	5f 4f       	sbci	r21, 0xFF	; 255
     af4:	3a f0       	brmi	.+14     	; 0xb04 <__divsf3_pse+0x70>
     af6:	9e 3f       	cpi	r25, 0xFE	; 254
     af8:	51 05       	cpc	r21, r1
     afa:	78 f0       	brcs	.+30     	; 0xb1a <__divsf3_pse+0x86>
     afc:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_inf>
     b00:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_szero>
     b04:	5f 3f       	cpi	r21, 0xFF	; 255
     b06:	e4 f3       	brlt	.-8      	; 0xb00 <__divsf3_pse+0x6c>
     b08:	98 3e       	cpi	r25, 0xE8	; 232
     b0a:	d4 f3       	brlt	.-12     	; 0xb00 <__divsf3_pse+0x6c>
     b0c:	86 95       	lsr	r24
     b0e:	77 95       	ror	r23
     b10:	67 95       	ror	r22
     b12:	b7 95       	ror	r27
     b14:	f7 95       	ror	r31
     b16:	9f 5f       	subi	r25, 0xFF	; 255
     b18:	c9 f7       	brne	.-14     	; 0xb0c <__divsf3_pse+0x78>
     b1a:	88 0f       	add	r24, r24
     b1c:	91 1d       	adc	r25, r1
     b1e:	96 95       	lsr	r25
     b20:	87 95       	ror	r24
     b22:	97 f9       	bld	r25, 7
     b24:	08 95       	ret
     b26:	e1 e0       	ldi	r30, 0x01	; 1
     b28:	66 0f       	add	r22, r22
     b2a:	77 1f       	adc	r23, r23
     b2c:	88 1f       	adc	r24, r24
     b2e:	bb 1f       	adc	r27, r27
     b30:	62 17       	cp	r22, r18
     b32:	73 07       	cpc	r23, r19
     b34:	84 07       	cpc	r24, r20
     b36:	ba 07       	cpc	r27, r26
     b38:	20 f0       	brcs	.+8      	; 0xb42 <__divsf3_pse+0xae>
     b3a:	62 1b       	sub	r22, r18
     b3c:	73 0b       	sbc	r23, r19
     b3e:	84 0b       	sbc	r24, r20
     b40:	ba 0b       	sbc	r27, r26
     b42:	ee 1f       	adc	r30, r30
     b44:	88 f7       	brcc	.-30     	; 0xb28 <__divsf3_pse+0x94>
     b46:	e0 95       	com	r30
     b48:	08 95       	ret

00000b4a <__fixsfsi>:
     b4a:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fixunssfsi>
     b4e:	68 94       	set
     b50:	b1 11       	cpse	r27, r1
     b52:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_szero>
     b56:	08 95       	ret

00000b58 <__fixunssfsi>:
     b58:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_splitA>
     b5c:	88 f0       	brcs	.+34     	; 0xb80 <__fixunssfsi+0x28>
     b5e:	9f 57       	subi	r25, 0x7F	; 127
     b60:	98 f0       	brcs	.+38     	; 0xb88 <__fixunssfsi+0x30>
     b62:	b9 2f       	mov	r27, r25
     b64:	99 27       	eor	r25, r25
     b66:	b7 51       	subi	r27, 0x17	; 23
     b68:	b0 f0       	brcs	.+44     	; 0xb96 <__fixunssfsi+0x3e>
     b6a:	e1 f0       	breq	.+56     	; 0xba4 <__fixunssfsi+0x4c>
     b6c:	66 0f       	add	r22, r22
     b6e:	77 1f       	adc	r23, r23
     b70:	88 1f       	adc	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	1a f0       	brmi	.+6      	; 0xb7c <__fixunssfsi+0x24>
     b76:	ba 95       	dec	r27
     b78:	c9 f7       	brne	.-14     	; 0xb6c <__fixunssfsi+0x14>
     b7a:	14 c0       	rjmp	.+40     	; 0xba4 <__fixunssfsi+0x4c>
     b7c:	b1 30       	cpi	r27, 0x01	; 1
     b7e:	91 f0       	breq	.+36     	; 0xba4 <__fixunssfsi+0x4c>
     b80:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_zero>
     b84:	b1 e0       	ldi	r27, 0x01	; 1
     b86:	08 95       	ret
     b88:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_zero>
     b8c:	67 2f       	mov	r22, r23
     b8e:	78 2f       	mov	r23, r24
     b90:	88 27       	eor	r24, r24
     b92:	b8 5f       	subi	r27, 0xF8	; 248
     b94:	39 f0       	breq	.+14     	; 0xba4 <__fixunssfsi+0x4c>
     b96:	b9 3f       	cpi	r27, 0xF9	; 249
     b98:	cc f3       	brlt	.-14     	; 0xb8c <__fixunssfsi+0x34>
     b9a:	86 95       	lsr	r24
     b9c:	77 95       	ror	r23
     b9e:	67 95       	ror	r22
     ba0:	b3 95       	inc	r27
     ba2:	d9 f7       	brne	.-10     	; 0xb9a <__fixunssfsi+0x42>
     ba4:	3e f4       	brtc	.+14     	; 0xbb4 <__fixunssfsi+0x5c>
     ba6:	90 95       	com	r25
     ba8:	80 95       	com	r24
     baa:	70 95       	com	r23
     bac:	61 95       	neg	r22
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	8f 4f       	sbci	r24, 0xFF	; 255
     bb2:	9f 4f       	sbci	r25, 0xFF	; 255
     bb4:	08 95       	ret

00000bb6 <__floatunsisf>:
     bb6:	e8 94       	clt
     bb8:	09 c0       	rjmp	.+18     	; 0xbcc <__floatsisf+0x12>

00000bba <__floatsisf>:
     bba:	97 fb       	bst	r25, 7
     bbc:	3e f4       	brtc	.+14     	; 0xbcc <__floatsisf+0x12>
     bbe:	90 95       	com	r25
     bc0:	80 95       	com	r24
     bc2:	70 95       	com	r23
     bc4:	61 95       	neg	r22
     bc6:	7f 4f       	sbci	r23, 0xFF	; 255
     bc8:	8f 4f       	sbci	r24, 0xFF	; 255
     bca:	9f 4f       	sbci	r25, 0xFF	; 255
     bcc:	99 23       	and	r25, r25
     bce:	a9 f0       	breq	.+42     	; 0xbfa <__floatsisf+0x40>
     bd0:	f9 2f       	mov	r31, r25
     bd2:	96 e9       	ldi	r25, 0x96	; 150
     bd4:	bb 27       	eor	r27, r27
     bd6:	93 95       	inc	r25
     bd8:	f6 95       	lsr	r31
     bda:	87 95       	ror	r24
     bdc:	77 95       	ror	r23
     bde:	67 95       	ror	r22
     be0:	b7 95       	ror	r27
     be2:	f1 11       	cpse	r31, r1
     be4:	f8 cf       	rjmp	.-16     	; 0xbd6 <__floatsisf+0x1c>
     be6:	fa f4       	brpl	.+62     	; 0xc26 <__floatsisf+0x6c>
     be8:	bb 0f       	add	r27, r27
     bea:	11 f4       	brne	.+4      	; 0xbf0 <__floatsisf+0x36>
     bec:	60 ff       	sbrs	r22, 0
     bee:	1b c0       	rjmp	.+54     	; 0xc26 <__floatsisf+0x6c>
     bf0:	6f 5f       	subi	r22, 0xFF	; 255
     bf2:	7f 4f       	sbci	r23, 0xFF	; 255
     bf4:	8f 4f       	sbci	r24, 0xFF	; 255
     bf6:	9f 4f       	sbci	r25, 0xFF	; 255
     bf8:	16 c0       	rjmp	.+44     	; 0xc26 <__floatsisf+0x6c>
     bfa:	88 23       	and	r24, r24
     bfc:	11 f0       	breq	.+4      	; 0xc02 <__floatsisf+0x48>
     bfe:	96 e9       	ldi	r25, 0x96	; 150
     c00:	11 c0       	rjmp	.+34     	; 0xc24 <__floatsisf+0x6a>
     c02:	77 23       	and	r23, r23
     c04:	21 f0       	breq	.+8      	; 0xc0e <__floatsisf+0x54>
     c06:	9e e8       	ldi	r25, 0x8E	; 142
     c08:	87 2f       	mov	r24, r23
     c0a:	76 2f       	mov	r23, r22
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__floatsisf+0x5e>
     c0e:	66 23       	and	r22, r22
     c10:	71 f0       	breq	.+28     	; 0xc2e <__floatsisf+0x74>
     c12:	96 e8       	ldi	r25, 0x86	; 134
     c14:	86 2f       	mov	r24, r22
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	2a f0       	brmi	.+10     	; 0xc26 <__floatsisf+0x6c>
     c1c:	9a 95       	dec	r25
     c1e:	66 0f       	add	r22, r22
     c20:	77 1f       	adc	r23, r23
     c22:	88 1f       	adc	r24, r24
     c24:	da f7       	brpl	.-10     	; 0xc1c <__floatsisf+0x62>
     c26:	88 0f       	add	r24, r24
     c28:	96 95       	lsr	r25
     c2a:	87 95       	ror	r24
     c2c:	97 f9       	bld	r25, 7
     c2e:	08 95       	ret

00000c30 <__fp_inf>:
     c30:	97 f9       	bld	r25, 7
     c32:	9f 67       	ori	r25, 0x7F	; 127
     c34:	80 e8       	ldi	r24, 0x80	; 128
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	08 95       	ret

00000c3c <__fp_nan>:
     c3c:	9f ef       	ldi	r25, 0xFF	; 255
     c3e:	80 ec       	ldi	r24, 0xC0	; 192
     c40:	08 95       	ret

00000c42 <__fp_pscA>:
     c42:	00 24       	eor	r0, r0
     c44:	0a 94       	dec	r0
     c46:	16 16       	cp	r1, r22
     c48:	17 06       	cpc	r1, r23
     c4a:	18 06       	cpc	r1, r24
     c4c:	09 06       	cpc	r0, r25
     c4e:	08 95       	ret

00000c50 <__fp_pscB>:
     c50:	00 24       	eor	r0, r0
     c52:	0a 94       	dec	r0
     c54:	12 16       	cp	r1, r18
     c56:	13 06       	cpc	r1, r19
     c58:	14 06       	cpc	r1, r20
     c5a:	05 06       	cpc	r0, r21
     c5c:	08 95       	ret

00000c5e <__fp_round>:
     c5e:	09 2e       	mov	r0, r25
     c60:	03 94       	inc	r0
     c62:	00 0c       	add	r0, r0
     c64:	11 f4       	brne	.+4      	; 0xc6a <__fp_round+0xc>
     c66:	88 23       	and	r24, r24
     c68:	52 f0       	brmi	.+20     	; 0xc7e <__fp_round+0x20>
     c6a:	bb 0f       	add	r27, r27
     c6c:	40 f4       	brcc	.+16     	; 0xc7e <__fp_round+0x20>
     c6e:	bf 2b       	or	r27, r31
     c70:	11 f4       	brne	.+4      	; 0xc76 <__fp_round+0x18>
     c72:	60 ff       	sbrs	r22, 0
     c74:	04 c0       	rjmp	.+8      	; 0xc7e <__fp_round+0x20>
     c76:	6f 5f       	subi	r22, 0xFF	; 255
     c78:	7f 4f       	sbci	r23, 0xFF	; 255
     c7a:	8f 4f       	sbci	r24, 0xFF	; 255
     c7c:	9f 4f       	sbci	r25, 0xFF	; 255
     c7e:	08 95       	ret

00000c80 <__fp_split3>:
     c80:	57 fd       	sbrc	r21, 7
     c82:	90 58       	subi	r25, 0x80	; 128
     c84:	44 0f       	add	r20, r20
     c86:	55 1f       	adc	r21, r21
     c88:	59 f0       	breq	.+22     	; 0xca0 <__fp_splitA+0x10>
     c8a:	5f 3f       	cpi	r21, 0xFF	; 255
     c8c:	71 f0       	breq	.+28     	; 0xcaa <__fp_splitA+0x1a>
     c8e:	47 95       	ror	r20

00000c90 <__fp_splitA>:
     c90:	88 0f       	add	r24, r24
     c92:	97 fb       	bst	r25, 7
     c94:	99 1f       	adc	r25, r25
     c96:	61 f0       	breq	.+24     	; 0xcb0 <__fp_splitA+0x20>
     c98:	9f 3f       	cpi	r25, 0xFF	; 255
     c9a:	79 f0       	breq	.+30     	; 0xcba <__fp_splitA+0x2a>
     c9c:	87 95       	ror	r24
     c9e:	08 95       	ret
     ca0:	12 16       	cp	r1, r18
     ca2:	13 06       	cpc	r1, r19
     ca4:	14 06       	cpc	r1, r20
     ca6:	55 1f       	adc	r21, r21
     ca8:	f2 cf       	rjmp	.-28     	; 0xc8e <__fp_split3+0xe>
     caa:	46 95       	lsr	r20
     cac:	f1 df       	rcall	.-30     	; 0xc90 <__fp_splitA>
     cae:	08 c0       	rjmp	.+16     	; 0xcc0 <__fp_splitA+0x30>
     cb0:	16 16       	cp	r1, r22
     cb2:	17 06       	cpc	r1, r23
     cb4:	18 06       	cpc	r1, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	f1 cf       	rjmp	.-30     	; 0xc9c <__fp_splitA+0xc>
     cba:	86 95       	lsr	r24
     cbc:	71 05       	cpc	r23, r1
     cbe:	61 05       	cpc	r22, r1
     cc0:	08 94       	sec
     cc2:	08 95       	ret

00000cc4 <__fp_zero>:
     cc4:	e8 94       	clt

00000cc6 <__fp_szero>:
     cc6:	bb 27       	eor	r27, r27
     cc8:	66 27       	eor	r22, r22
     cca:	77 27       	eor	r23, r23
     ccc:	cb 01       	movw	r24, r22
     cce:	97 f9       	bld	r25, 7
     cd0:	08 95       	ret

00000cd2 <__mulsf3>:
     cd2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__mulsf3x>
     cd6:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__fp_round>
     cda:	0e 94 21 06 	call	0xc42	; 0xc42 <__fp_pscA>
     cde:	38 f0       	brcs	.+14     	; 0xcee <__mulsf3+0x1c>
     ce0:	0e 94 28 06 	call	0xc50	; 0xc50 <__fp_pscB>
     ce4:	20 f0       	brcs	.+8      	; 0xcee <__mulsf3+0x1c>
     ce6:	95 23       	and	r25, r21
     ce8:	11 f0       	breq	.+4      	; 0xcee <__mulsf3+0x1c>
     cea:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_inf>
     cee:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__fp_nan>
     cf2:	11 24       	eor	r1, r1
     cf4:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_szero>

00000cf8 <__mulsf3x>:
     cf8:	0e 94 40 06 	call	0xc80	; 0xc80 <__fp_split3>
     cfc:	70 f3       	brcs	.-36     	; 0xcda <__mulsf3+0x8>

00000cfe <__mulsf3_pse>:
     cfe:	95 9f       	mul	r25, r21
     d00:	c1 f3       	breq	.-16     	; 0xcf2 <__mulsf3+0x20>
     d02:	95 0f       	add	r25, r21
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	55 1f       	adc	r21, r21
     d08:	62 9f       	mul	r22, r18
     d0a:	f0 01       	movw	r30, r0
     d0c:	72 9f       	mul	r23, r18
     d0e:	bb 27       	eor	r27, r27
     d10:	f0 0d       	add	r31, r0
     d12:	b1 1d       	adc	r27, r1
     d14:	63 9f       	mul	r22, r19
     d16:	aa 27       	eor	r26, r26
     d18:	f0 0d       	add	r31, r0
     d1a:	b1 1d       	adc	r27, r1
     d1c:	aa 1f       	adc	r26, r26
     d1e:	64 9f       	mul	r22, r20
     d20:	66 27       	eor	r22, r22
     d22:	b0 0d       	add	r27, r0
     d24:	a1 1d       	adc	r26, r1
     d26:	66 1f       	adc	r22, r22
     d28:	82 9f       	mul	r24, r18
     d2a:	22 27       	eor	r18, r18
     d2c:	b0 0d       	add	r27, r0
     d2e:	a1 1d       	adc	r26, r1
     d30:	62 1f       	adc	r22, r18
     d32:	73 9f       	mul	r23, r19
     d34:	b0 0d       	add	r27, r0
     d36:	a1 1d       	adc	r26, r1
     d38:	62 1f       	adc	r22, r18
     d3a:	83 9f       	mul	r24, r19
     d3c:	a0 0d       	add	r26, r0
     d3e:	61 1d       	adc	r22, r1
     d40:	22 1f       	adc	r18, r18
     d42:	74 9f       	mul	r23, r20
     d44:	33 27       	eor	r19, r19
     d46:	a0 0d       	add	r26, r0
     d48:	61 1d       	adc	r22, r1
     d4a:	23 1f       	adc	r18, r19
     d4c:	84 9f       	mul	r24, r20
     d4e:	60 0d       	add	r22, r0
     d50:	21 1d       	adc	r18, r1
     d52:	82 2f       	mov	r24, r18
     d54:	76 2f       	mov	r23, r22
     d56:	6a 2f       	mov	r22, r26
     d58:	11 24       	eor	r1, r1
     d5a:	9f 57       	subi	r25, 0x7F	; 127
     d5c:	50 40       	sbci	r21, 0x00	; 0
     d5e:	9a f0       	brmi	.+38     	; 0xd86 <__mulsf3_pse+0x88>
     d60:	f1 f0       	breq	.+60     	; 0xd9e <__mulsf3_pse+0xa0>
     d62:	88 23       	and	r24, r24
     d64:	4a f0       	brmi	.+18     	; 0xd78 <__mulsf3_pse+0x7a>
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	bb 1f       	adc	r27, r27
     d6c:	66 1f       	adc	r22, r22
     d6e:	77 1f       	adc	r23, r23
     d70:	88 1f       	adc	r24, r24
     d72:	91 50       	subi	r25, 0x01	; 1
     d74:	50 40       	sbci	r21, 0x00	; 0
     d76:	a9 f7       	brne	.-22     	; 0xd62 <__mulsf3_pse+0x64>
     d78:	9e 3f       	cpi	r25, 0xFE	; 254
     d7a:	51 05       	cpc	r21, r1
     d7c:	80 f0       	brcs	.+32     	; 0xd9e <__mulsf3_pse+0xa0>
     d7e:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_inf>
     d82:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_szero>
     d86:	5f 3f       	cpi	r21, 0xFF	; 255
     d88:	e4 f3       	brlt	.-8      	; 0xd82 <__mulsf3_pse+0x84>
     d8a:	98 3e       	cpi	r25, 0xE8	; 232
     d8c:	d4 f3       	brlt	.-12     	; 0xd82 <__mulsf3_pse+0x84>
     d8e:	86 95       	lsr	r24
     d90:	77 95       	ror	r23
     d92:	67 95       	ror	r22
     d94:	b7 95       	ror	r27
     d96:	f7 95       	ror	r31
     d98:	e7 95       	ror	r30
     d9a:	9f 5f       	subi	r25, 0xFF	; 255
     d9c:	c1 f7       	brne	.-16     	; 0xd8e <__mulsf3_pse+0x90>
     d9e:	fe 2b       	or	r31, r30
     da0:	88 0f       	add	r24, r24
     da2:	91 1d       	adc	r25, r1
     da4:	96 95       	lsr	r25
     da6:	87 95       	ror	r24
     da8:	97 f9       	bld	r25, 7
     daa:	08 95       	ret

00000dac <round>:
     dac:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_splitA>
     db0:	e8 f0       	brcs	.+58     	; 0xdec <round+0x40>
     db2:	9e 37       	cpi	r25, 0x7E	; 126
     db4:	e8 f0       	brcs	.+58     	; 0xdf0 <round+0x44>
     db6:	96 39       	cpi	r25, 0x96	; 150
     db8:	b8 f4       	brcc	.+46     	; 0xde8 <round+0x3c>
     dba:	9e 38       	cpi	r25, 0x8E	; 142
     dbc:	48 f4       	brcc	.+18     	; 0xdd0 <round+0x24>
     dbe:	67 2f       	mov	r22, r23
     dc0:	78 2f       	mov	r23, r24
     dc2:	88 27       	eor	r24, r24
     dc4:	98 5f       	subi	r25, 0xF8	; 248
     dc6:	f9 cf       	rjmp	.-14     	; 0xdba <round+0xe>
     dc8:	86 95       	lsr	r24
     dca:	77 95       	ror	r23
     dcc:	67 95       	ror	r22
     dce:	93 95       	inc	r25
     dd0:	95 39       	cpi	r25, 0x95	; 149
     dd2:	d0 f3       	brcs	.-12     	; 0xdc8 <round+0x1c>
     dd4:	b6 2f       	mov	r27, r22
     dd6:	b1 70       	andi	r27, 0x01	; 1
     dd8:	6b 0f       	add	r22, r27
     dda:	71 1d       	adc	r23, r1
     ddc:	81 1d       	adc	r24, r1
     dde:	20 f4       	brcc	.+8      	; 0xde8 <round+0x3c>
     de0:	87 95       	ror	r24
     de2:	77 95       	ror	r23
     de4:	67 95       	ror	r22
     de6:	93 95       	inc	r25
     de8:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__fp_mintl>
     dec:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_mpack>
     df0:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_szero>

00000df4 <__fp_mintl>:
     df4:	88 23       	and	r24, r24
     df6:	71 f4       	brne	.+28     	; 0xe14 <__fp_mintl+0x20>
     df8:	77 23       	and	r23, r23
     dfa:	21 f0       	breq	.+8      	; 0xe04 <__fp_mintl+0x10>
     dfc:	98 50       	subi	r25, 0x08	; 8
     dfe:	87 2b       	or	r24, r23
     e00:	76 2f       	mov	r23, r22
     e02:	07 c0       	rjmp	.+14     	; 0xe12 <__fp_mintl+0x1e>
     e04:	66 23       	and	r22, r22
     e06:	11 f4       	brne	.+4      	; 0xe0c <__fp_mintl+0x18>
     e08:	99 27       	eor	r25, r25
     e0a:	0d c0       	rjmp	.+26     	; 0xe26 <__fp_mintl+0x32>
     e0c:	90 51       	subi	r25, 0x10	; 16
     e0e:	86 2b       	or	r24, r22
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	2a f0       	brmi	.+10     	; 0xe20 <__fp_mintl+0x2c>
     e16:	9a 95       	dec	r25
     e18:	66 0f       	add	r22, r22
     e1a:	77 1f       	adc	r23, r23
     e1c:	88 1f       	adc	r24, r24
     e1e:	da f7       	brpl	.-10     	; 0xe16 <__fp_mintl+0x22>
     e20:	88 0f       	add	r24, r24
     e22:	96 95       	lsr	r25
     e24:	87 95       	ror	r24
     e26:	97 f9       	bld	r25, 7
     e28:	08 95       	ret

00000e2a <__fp_mpack>:
     e2a:	9f 3f       	cpi	r25, 0xFF	; 255
     e2c:	31 f0       	breq	.+12     	; 0xe3a <__fp_mpack_finite+0xc>

00000e2e <__fp_mpack_finite>:
     e2e:	91 50       	subi	r25, 0x01	; 1
     e30:	20 f4       	brcc	.+8      	; 0xe3a <__fp_mpack_finite+0xc>
     e32:	87 95       	ror	r24
     e34:	77 95       	ror	r23
     e36:	67 95       	ror	r22
     e38:	b7 95       	ror	r27
     e3a:	88 0f       	add	r24, r24
     e3c:	91 1d       	adc	r25, r1
     e3e:	96 95       	lsr	r25
     e40:	87 95       	ror	r24
     e42:	97 f9       	bld	r25, 7
     e44:	08 95       	ret

00000e46 <memcpy>:
     e46:	fb 01       	movw	r30, r22
     e48:	dc 01       	movw	r26, r24
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <memcpy+0xa>
     e4c:	01 90       	ld	r0, Z+
     e4e:	0d 92       	st	X+, r0
     e50:	41 50       	subi	r20, 0x01	; 1
     e52:	50 40       	sbci	r21, 0x00	; 0
     e54:	d8 f7       	brcc	.-10     	; 0xe4c <memcpy+0x6>
     e56:	08 95       	ret

00000e58 <memmove>:
     e58:	68 17       	cp	r22, r24
     e5a:	79 07       	cpc	r23, r25
     e5c:	68 f4       	brcc	.+26     	; 0xe78 <memmove+0x20>
     e5e:	fb 01       	movw	r30, r22
     e60:	dc 01       	movw	r26, r24
     e62:	e4 0f       	add	r30, r20
     e64:	f5 1f       	adc	r31, r21
     e66:	a4 0f       	add	r26, r20
     e68:	b5 1f       	adc	r27, r21
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <memmove+0x18>
     e6c:	02 90       	ld	r0, -Z
     e6e:	0e 92       	st	-X, r0
     e70:	41 50       	subi	r20, 0x01	; 1
     e72:	50 40       	sbci	r21, 0x00	; 0
     e74:	d8 f7       	brcc	.-10     	; 0xe6c <memmove+0x14>
     e76:	08 95       	ret
     e78:	0c 94 23 07 	jmp	0xe46	; 0xe46 <memcpy>

00000e7c <strncmp>:
     e7c:	fb 01       	movw	r30, r22
     e7e:	dc 01       	movw	r26, r24
     e80:	41 50       	subi	r20, 0x01	; 1
     e82:	50 40       	sbci	r21, 0x00	; 0
     e84:	30 f0       	brcs	.+12     	; 0xe92 <strncmp+0x16>
     e86:	8d 91       	ld	r24, X+
     e88:	01 90       	ld	r0, Z+
     e8a:	80 19       	sub	r24, r0
     e8c:	19 f4       	brne	.+6      	; 0xe94 <strncmp+0x18>
     e8e:	00 20       	and	r0, r0
     e90:	b9 f7       	brne	.-18     	; 0xe80 <strncmp+0x4>
     e92:	88 1b       	sub	r24, r24
     e94:	99 0b       	sbc	r25, r25
     e96:	08 95       	ret

00000e98 <strstr>:
     e98:	fb 01       	movw	r30, r22
     e9a:	51 91       	ld	r21, Z+
     e9c:	55 23       	and	r21, r21
     e9e:	a9 f0       	breq	.+42     	; 0xeca <strstr+0x32>
     ea0:	bf 01       	movw	r22, r30
     ea2:	dc 01       	movw	r26, r24
     ea4:	4d 91       	ld	r20, X+
     ea6:	45 17       	cp	r20, r21
     ea8:	41 11       	cpse	r20, r1
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <strstr+0xc>
     eac:	59 f4       	brne	.+22     	; 0xec4 <strstr+0x2c>
     eae:	cd 01       	movw	r24, r26
     eb0:	01 90       	ld	r0, Z+
     eb2:	00 20       	and	r0, r0
     eb4:	49 f0       	breq	.+18     	; 0xec8 <strstr+0x30>
     eb6:	4d 91       	ld	r20, X+
     eb8:	40 15       	cp	r20, r0
     eba:	41 11       	cpse	r20, r1
     ebc:	c9 f3       	breq	.-14     	; 0xeb0 <strstr+0x18>
     ebe:	fb 01       	movw	r30, r22
     ec0:	41 11       	cpse	r20, r1
     ec2:	ef cf       	rjmp	.-34     	; 0xea2 <strstr+0xa>
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	08 95       	ret

00000ecc <sprintf>:
     ecc:	ae e0       	ldi	r26, 0x0E	; 14
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	ec e6       	ldi	r30, 0x6C	; 108
     ed2:	f7 e0       	ldi	r31, 0x07	; 7
     ed4:	0c 94 27 0a 	jmp	0x144e	; 0x144e <__prologue_saves__+0x1c>
     ed8:	0d 89       	ldd	r16, Y+21	; 0x15
     eda:	1e 89       	ldd	r17, Y+22	; 0x16
     edc:	86 e0       	ldi	r24, 0x06	; 6
     ede:	8c 83       	std	Y+4, r24	; 0x04
     ee0:	1a 83       	std	Y+2, r17	; 0x02
     ee2:	09 83       	std	Y+1, r16	; 0x01
     ee4:	8f ef       	ldi	r24, 0xFF	; 255
     ee6:	9f e7       	ldi	r25, 0x7F	; 127
     ee8:	9e 83       	std	Y+6, r25	; 0x06
     eea:	8d 83       	std	Y+5, r24	; 0x05
     eec:	ae 01       	movw	r20, r28
     eee:	47 5e       	subi	r20, 0xE7	; 231
     ef0:	5f 4f       	sbci	r21, 0xFF	; 255
     ef2:	6f 89       	ldd	r22, Y+23	; 0x17
     ef4:	78 8d       	ldd	r23, Y+24	; 0x18
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	0e 94 88 07 	call	0xf10	; 0xf10 <vfprintf>
     efe:	ef 81       	ldd	r30, Y+7	; 0x07
     f00:	f8 85       	ldd	r31, Y+8	; 0x08
     f02:	e0 0f       	add	r30, r16
     f04:	f1 1f       	adc	r31, r17
     f06:	10 82       	st	Z, r1
     f08:	2e 96       	adiw	r28, 0x0e	; 14
     f0a:	e4 e0       	ldi	r30, 0x04	; 4
     f0c:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__epilogue_restores__+0x1c>

00000f10 <vfprintf>:
     f10:	ab e0       	ldi	r26, 0x0B	; 11
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ee e8       	ldi	r30, 0x8E	; 142
     f16:	f7 e0       	ldi	r31, 0x07	; 7
     f18:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__prologue_saves__>
     f1c:	6c 01       	movw	r12, r24
     f1e:	7b 01       	movw	r14, r22
     f20:	8a 01       	movw	r16, r20
     f22:	fc 01       	movw	r30, r24
     f24:	17 82       	std	Z+7, r1	; 0x07
     f26:	16 82       	std	Z+6, r1	; 0x06
     f28:	83 81       	ldd	r24, Z+3	; 0x03
     f2a:	81 ff       	sbrs	r24, 1
     f2c:	cc c1       	rjmp	.+920    	; 0x12c6 <vfprintf+0x3b6>
     f2e:	ce 01       	movw	r24, r28
     f30:	01 96       	adiw	r24, 0x01	; 1
     f32:	3c 01       	movw	r6, r24
     f34:	f6 01       	movw	r30, r12
     f36:	93 81       	ldd	r25, Z+3	; 0x03
     f38:	f7 01       	movw	r30, r14
     f3a:	93 fd       	sbrc	r25, 3
     f3c:	85 91       	lpm	r24, Z+
     f3e:	93 ff       	sbrs	r25, 3
     f40:	81 91       	ld	r24, Z+
     f42:	7f 01       	movw	r14, r30
     f44:	88 23       	and	r24, r24
     f46:	09 f4       	brne	.+2      	; 0xf4a <vfprintf+0x3a>
     f48:	ba c1       	rjmp	.+884    	; 0x12be <vfprintf+0x3ae>
     f4a:	85 32       	cpi	r24, 0x25	; 37
     f4c:	39 f4       	brne	.+14     	; 0xf5c <vfprintf+0x4c>
     f4e:	93 fd       	sbrc	r25, 3
     f50:	85 91       	lpm	r24, Z+
     f52:	93 ff       	sbrs	r25, 3
     f54:	81 91       	ld	r24, Z+
     f56:	7f 01       	movw	r14, r30
     f58:	85 32       	cpi	r24, 0x25	; 37
     f5a:	29 f4       	brne	.+10     	; 0xf66 <vfprintf+0x56>
     f5c:	b6 01       	movw	r22, r12
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
     f64:	e7 cf       	rjmp	.-50     	; 0xf34 <vfprintf+0x24>
     f66:	91 2c       	mov	r9, r1
     f68:	21 2c       	mov	r2, r1
     f6a:	31 2c       	mov	r3, r1
     f6c:	ff e1       	ldi	r31, 0x1F	; 31
     f6e:	f3 15       	cp	r31, r3
     f70:	d8 f0       	brcs	.+54     	; 0xfa8 <vfprintf+0x98>
     f72:	8b 32       	cpi	r24, 0x2B	; 43
     f74:	79 f0       	breq	.+30     	; 0xf94 <vfprintf+0x84>
     f76:	38 f4       	brcc	.+14     	; 0xf86 <vfprintf+0x76>
     f78:	80 32       	cpi	r24, 0x20	; 32
     f7a:	79 f0       	breq	.+30     	; 0xf9a <vfprintf+0x8a>
     f7c:	83 32       	cpi	r24, 0x23	; 35
     f7e:	a1 f4       	brne	.+40     	; 0xfa8 <vfprintf+0x98>
     f80:	23 2d       	mov	r18, r3
     f82:	20 61       	ori	r18, 0x10	; 16
     f84:	1d c0       	rjmp	.+58     	; 0xfc0 <vfprintf+0xb0>
     f86:	8d 32       	cpi	r24, 0x2D	; 45
     f88:	61 f0       	breq	.+24     	; 0xfa2 <vfprintf+0x92>
     f8a:	80 33       	cpi	r24, 0x30	; 48
     f8c:	69 f4       	brne	.+26     	; 0xfa8 <vfprintf+0x98>
     f8e:	23 2d       	mov	r18, r3
     f90:	21 60       	ori	r18, 0x01	; 1
     f92:	16 c0       	rjmp	.+44     	; 0xfc0 <vfprintf+0xb0>
     f94:	83 2d       	mov	r24, r3
     f96:	82 60       	ori	r24, 0x02	; 2
     f98:	38 2e       	mov	r3, r24
     f9a:	e3 2d       	mov	r30, r3
     f9c:	e4 60       	ori	r30, 0x04	; 4
     f9e:	3e 2e       	mov	r3, r30
     fa0:	2a c0       	rjmp	.+84     	; 0xff6 <vfprintf+0xe6>
     fa2:	f3 2d       	mov	r31, r3
     fa4:	f8 60       	ori	r31, 0x08	; 8
     fa6:	1d c0       	rjmp	.+58     	; 0xfe2 <vfprintf+0xd2>
     fa8:	37 fc       	sbrc	r3, 7
     faa:	2d c0       	rjmp	.+90     	; 0x1006 <vfprintf+0xf6>
     fac:	20 ed       	ldi	r18, 0xD0	; 208
     fae:	28 0f       	add	r18, r24
     fb0:	2a 30       	cpi	r18, 0x0A	; 10
     fb2:	40 f0       	brcs	.+16     	; 0xfc4 <vfprintf+0xb4>
     fb4:	8e 32       	cpi	r24, 0x2E	; 46
     fb6:	b9 f4       	brne	.+46     	; 0xfe6 <vfprintf+0xd6>
     fb8:	36 fc       	sbrc	r3, 6
     fba:	81 c1       	rjmp	.+770    	; 0x12be <vfprintf+0x3ae>
     fbc:	23 2d       	mov	r18, r3
     fbe:	20 64       	ori	r18, 0x40	; 64
     fc0:	32 2e       	mov	r3, r18
     fc2:	19 c0       	rjmp	.+50     	; 0xff6 <vfprintf+0xe6>
     fc4:	36 fe       	sbrs	r3, 6
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <vfprintf+0xc4>
     fc8:	8a e0       	ldi	r24, 0x0A	; 10
     fca:	98 9e       	mul	r9, r24
     fcc:	20 0d       	add	r18, r0
     fce:	11 24       	eor	r1, r1
     fd0:	92 2e       	mov	r9, r18
     fd2:	11 c0       	rjmp	.+34     	; 0xff6 <vfprintf+0xe6>
     fd4:	ea e0       	ldi	r30, 0x0A	; 10
     fd6:	2e 9e       	mul	r2, r30
     fd8:	20 0d       	add	r18, r0
     fda:	11 24       	eor	r1, r1
     fdc:	22 2e       	mov	r2, r18
     fde:	f3 2d       	mov	r31, r3
     fe0:	f0 62       	ori	r31, 0x20	; 32
     fe2:	3f 2e       	mov	r3, r31
     fe4:	08 c0       	rjmp	.+16     	; 0xff6 <vfprintf+0xe6>
     fe6:	8c 36       	cpi	r24, 0x6C	; 108
     fe8:	21 f4       	brne	.+8      	; 0xff2 <vfprintf+0xe2>
     fea:	83 2d       	mov	r24, r3
     fec:	80 68       	ori	r24, 0x80	; 128
     fee:	38 2e       	mov	r3, r24
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <vfprintf+0xe6>
     ff2:	88 36       	cpi	r24, 0x68	; 104
     ff4:	41 f4       	brne	.+16     	; 0x1006 <vfprintf+0xf6>
     ff6:	f7 01       	movw	r30, r14
     ff8:	93 fd       	sbrc	r25, 3
     ffa:	85 91       	lpm	r24, Z+
     ffc:	93 ff       	sbrs	r25, 3
     ffe:	81 91       	ld	r24, Z+
    1000:	7f 01       	movw	r14, r30
    1002:	81 11       	cpse	r24, r1
    1004:	b3 cf       	rjmp	.-154    	; 0xf6c <vfprintf+0x5c>
    1006:	98 2f       	mov	r25, r24
    1008:	9f 7d       	andi	r25, 0xDF	; 223
    100a:	95 54       	subi	r25, 0x45	; 69
    100c:	93 30       	cpi	r25, 0x03	; 3
    100e:	28 f4       	brcc	.+10     	; 0x101a <vfprintf+0x10a>
    1010:	0c 5f       	subi	r16, 0xFC	; 252
    1012:	1f 4f       	sbci	r17, 0xFF	; 255
    1014:	9f e3       	ldi	r25, 0x3F	; 63
    1016:	99 83       	std	Y+1, r25	; 0x01
    1018:	0d c0       	rjmp	.+26     	; 0x1034 <vfprintf+0x124>
    101a:	83 36       	cpi	r24, 0x63	; 99
    101c:	31 f0       	breq	.+12     	; 0x102a <vfprintf+0x11a>
    101e:	83 37       	cpi	r24, 0x73	; 115
    1020:	71 f0       	breq	.+28     	; 0x103e <vfprintf+0x12e>
    1022:	83 35       	cpi	r24, 0x53	; 83
    1024:	09 f0       	breq	.+2      	; 0x1028 <vfprintf+0x118>
    1026:	59 c0       	rjmp	.+178    	; 0x10da <vfprintf+0x1ca>
    1028:	21 c0       	rjmp	.+66     	; 0x106c <vfprintf+0x15c>
    102a:	f8 01       	movw	r30, r16
    102c:	80 81       	ld	r24, Z
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	0e 5f       	subi	r16, 0xFE	; 254
    1032:	1f 4f       	sbci	r17, 0xFF	; 255
    1034:	88 24       	eor	r8, r8
    1036:	83 94       	inc	r8
    1038:	91 2c       	mov	r9, r1
    103a:	53 01       	movw	r10, r6
    103c:	13 c0       	rjmp	.+38     	; 0x1064 <vfprintf+0x154>
    103e:	28 01       	movw	r4, r16
    1040:	f2 e0       	ldi	r31, 0x02	; 2
    1042:	4f 0e       	add	r4, r31
    1044:	51 1c       	adc	r5, r1
    1046:	f8 01       	movw	r30, r16
    1048:	a0 80       	ld	r10, Z
    104a:	b1 80       	ldd	r11, Z+1	; 0x01
    104c:	36 fe       	sbrs	r3, 6
    104e:	03 c0       	rjmp	.+6      	; 0x1056 <vfprintf+0x146>
    1050:	69 2d       	mov	r22, r9
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	02 c0       	rjmp	.+4      	; 0x105a <vfprintf+0x14a>
    1056:	6f ef       	ldi	r22, 0xFF	; 255
    1058:	7f ef       	ldi	r23, 0xFF	; 255
    105a:	c5 01       	movw	r24, r10
    105c:	0e 94 74 09 	call	0x12e8	; 0x12e8 <strnlen>
    1060:	4c 01       	movw	r8, r24
    1062:	82 01       	movw	r16, r4
    1064:	f3 2d       	mov	r31, r3
    1066:	ff 77       	andi	r31, 0x7F	; 127
    1068:	3f 2e       	mov	r3, r31
    106a:	16 c0       	rjmp	.+44     	; 0x1098 <vfprintf+0x188>
    106c:	28 01       	movw	r4, r16
    106e:	22 e0       	ldi	r18, 0x02	; 2
    1070:	42 0e       	add	r4, r18
    1072:	51 1c       	adc	r5, r1
    1074:	f8 01       	movw	r30, r16
    1076:	a0 80       	ld	r10, Z
    1078:	b1 80       	ldd	r11, Z+1	; 0x01
    107a:	36 fe       	sbrs	r3, 6
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <vfprintf+0x174>
    107e:	69 2d       	mov	r22, r9
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <vfprintf+0x178>
    1084:	6f ef       	ldi	r22, 0xFF	; 255
    1086:	7f ef       	ldi	r23, 0xFF	; 255
    1088:	c5 01       	movw	r24, r10
    108a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <strnlen_P>
    108e:	4c 01       	movw	r8, r24
    1090:	f3 2d       	mov	r31, r3
    1092:	f0 68       	ori	r31, 0x80	; 128
    1094:	3f 2e       	mov	r3, r31
    1096:	82 01       	movw	r16, r4
    1098:	33 fc       	sbrc	r3, 3
    109a:	1b c0       	rjmp	.+54     	; 0x10d2 <vfprintf+0x1c2>
    109c:	82 2d       	mov	r24, r2
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	88 16       	cp	r8, r24
    10a2:	99 06       	cpc	r9, r25
    10a4:	b0 f4       	brcc	.+44     	; 0x10d2 <vfprintf+0x1c2>
    10a6:	b6 01       	movw	r22, r12
    10a8:	80 e2       	ldi	r24, 0x20	; 32
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
    10b0:	2a 94       	dec	r2
    10b2:	f4 cf       	rjmp	.-24     	; 0x109c <vfprintf+0x18c>
    10b4:	f5 01       	movw	r30, r10
    10b6:	37 fc       	sbrc	r3, 7
    10b8:	85 91       	lpm	r24, Z+
    10ba:	37 fe       	sbrs	r3, 7
    10bc:	81 91       	ld	r24, Z+
    10be:	5f 01       	movw	r10, r30
    10c0:	b6 01       	movw	r22, r12
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
    10c8:	21 10       	cpse	r2, r1
    10ca:	2a 94       	dec	r2
    10cc:	21 e0       	ldi	r18, 0x01	; 1
    10ce:	82 1a       	sub	r8, r18
    10d0:	91 08       	sbc	r9, r1
    10d2:	81 14       	cp	r8, r1
    10d4:	91 04       	cpc	r9, r1
    10d6:	71 f7       	brne	.-36     	; 0x10b4 <vfprintf+0x1a4>
    10d8:	e8 c0       	rjmp	.+464    	; 0x12aa <vfprintf+0x39a>
    10da:	84 36       	cpi	r24, 0x64	; 100
    10dc:	11 f0       	breq	.+4      	; 0x10e2 <vfprintf+0x1d2>
    10de:	89 36       	cpi	r24, 0x69	; 105
    10e0:	41 f5       	brne	.+80     	; 0x1132 <vfprintf+0x222>
    10e2:	f8 01       	movw	r30, r16
    10e4:	37 fe       	sbrs	r3, 7
    10e6:	07 c0       	rjmp	.+14     	; 0x10f6 <vfprintf+0x1e6>
    10e8:	60 81       	ld	r22, Z
    10ea:	71 81       	ldd	r23, Z+1	; 0x01
    10ec:	82 81       	ldd	r24, Z+2	; 0x02
    10ee:	93 81       	ldd	r25, Z+3	; 0x03
    10f0:	0c 5f       	subi	r16, 0xFC	; 252
    10f2:	1f 4f       	sbci	r17, 0xFF	; 255
    10f4:	08 c0       	rjmp	.+16     	; 0x1106 <vfprintf+0x1f6>
    10f6:	60 81       	ld	r22, Z
    10f8:	71 81       	ldd	r23, Z+1	; 0x01
    10fa:	07 2e       	mov	r0, r23
    10fc:	00 0c       	add	r0, r0
    10fe:	88 0b       	sbc	r24, r24
    1100:	99 0b       	sbc	r25, r25
    1102:	0e 5f       	subi	r16, 0xFE	; 254
    1104:	1f 4f       	sbci	r17, 0xFF	; 255
    1106:	f3 2d       	mov	r31, r3
    1108:	ff 76       	andi	r31, 0x6F	; 111
    110a:	3f 2e       	mov	r3, r31
    110c:	97 ff       	sbrs	r25, 7
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <vfprintf+0x212>
    1110:	90 95       	com	r25
    1112:	80 95       	com	r24
    1114:	70 95       	com	r23
    1116:	61 95       	neg	r22
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
    111a:	8f 4f       	sbci	r24, 0xFF	; 255
    111c:	9f 4f       	sbci	r25, 0xFF	; 255
    111e:	f0 68       	ori	r31, 0x80	; 128
    1120:	3f 2e       	mov	r3, r31
    1122:	2a e0       	ldi	r18, 0x0A	; 10
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	a3 01       	movw	r20, r6
    1128:	0e 94 bb 09 	call	0x1376	; 0x1376 <__ultoa_invert>
    112c:	88 2e       	mov	r8, r24
    112e:	86 18       	sub	r8, r6
    1130:	45 c0       	rjmp	.+138    	; 0x11bc <vfprintf+0x2ac>
    1132:	85 37       	cpi	r24, 0x75	; 117
    1134:	31 f4       	brne	.+12     	; 0x1142 <vfprintf+0x232>
    1136:	23 2d       	mov	r18, r3
    1138:	2f 7e       	andi	r18, 0xEF	; 239
    113a:	b2 2e       	mov	r11, r18
    113c:	2a e0       	ldi	r18, 0x0A	; 10
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	25 c0       	rjmp	.+74     	; 0x118c <vfprintf+0x27c>
    1142:	93 2d       	mov	r25, r3
    1144:	99 7f       	andi	r25, 0xF9	; 249
    1146:	b9 2e       	mov	r11, r25
    1148:	8f 36       	cpi	r24, 0x6F	; 111
    114a:	c1 f0       	breq	.+48     	; 0x117c <vfprintf+0x26c>
    114c:	18 f4       	brcc	.+6      	; 0x1154 <vfprintf+0x244>
    114e:	88 35       	cpi	r24, 0x58	; 88
    1150:	79 f0       	breq	.+30     	; 0x1170 <vfprintf+0x260>
    1152:	b5 c0       	rjmp	.+362    	; 0x12be <vfprintf+0x3ae>
    1154:	80 37       	cpi	r24, 0x70	; 112
    1156:	19 f0       	breq	.+6      	; 0x115e <vfprintf+0x24e>
    1158:	88 37       	cpi	r24, 0x78	; 120
    115a:	21 f0       	breq	.+8      	; 0x1164 <vfprintf+0x254>
    115c:	b0 c0       	rjmp	.+352    	; 0x12be <vfprintf+0x3ae>
    115e:	e9 2f       	mov	r30, r25
    1160:	e0 61       	ori	r30, 0x10	; 16
    1162:	be 2e       	mov	r11, r30
    1164:	b4 fe       	sbrs	r11, 4
    1166:	0d c0       	rjmp	.+26     	; 0x1182 <vfprintf+0x272>
    1168:	fb 2d       	mov	r31, r11
    116a:	f4 60       	ori	r31, 0x04	; 4
    116c:	bf 2e       	mov	r11, r31
    116e:	09 c0       	rjmp	.+18     	; 0x1182 <vfprintf+0x272>
    1170:	34 fe       	sbrs	r3, 4
    1172:	0a c0       	rjmp	.+20     	; 0x1188 <vfprintf+0x278>
    1174:	29 2f       	mov	r18, r25
    1176:	26 60       	ori	r18, 0x06	; 6
    1178:	b2 2e       	mov	r11, r18
    117a:	06 c0       	rjmp	.+12     	; 0x1188 <vfprintf+0x278>
    117c:	28 e0       	ldi	r18, 0x08	; 8
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	05 c0       	rjmp	.+10     	; 0x118c <vfprintf+0x27c>
    1182:	20 e1       	ldi	r18, 0x10	; 16
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	02 c0       	rjmp	.+4      	; 0x118c <vfprintf+0x27c>
    1188:	20 e1       	ldi	r18, 0x10	; 16
    118a:	32 e0       	ldi	r19, 0x02	; 2
    118c:	f8 01       	movw	r30, r16
    118e:	b7 fe       	sbrs	r11, 7
    1190:	07 c0       	rjmp	.+14     	; 0x11a0 <vfprintf+0x290>
    1192:	60 81       	ld	r22, Z
    1194:	71 81       	ldd	r23, Z+1	; 0x01
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	0c 5f       	subi	r16, 0xFC	; 252
    119c:	1f 4f       	sbci	r17, 0xFF	; 255
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <vfprintf+0x29c>
    11a0:	60 81       	ld	r22, Z
    11a2:	71 81       	ldd	r23, Z+1	; 0x01
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 5f       	subi	r16, 0xFE	; 254
    11aa:	1f 4f       	sbci	r17, 0xFF	; 255
    11ac:	a3 01       	movw	r20, r6
    11ae:	0e 94 bb 09 	call	0x1376	; 0x1376 <__ultoa_invert>
    11b2:	88 2e       	mov	r8, r24
    11b4:	86 18       	sub	r8, r6
    11b6:	fb 2d       	mov	r31, r11
    11b8:	ff 77       	andi	r31, 0x7F	; 127
    11ba:	3f 2e       	mov	r3, r31
    11bc:	36 fe       	sbrs	r3, 6
    11be:	0d c0       	rjmp	.+26     	; 0x11da <vfprintf+0x2ca>
    11c0:	23 2d       	mov	r18, r3
    11c2:	2e 7f       	andi	r18, 0xFE	; 254
    11c4:	a2 2e       	mov	r10, r18
    11c6:	89 14       	cp	r8, r9
    11c8:	58 f4       	brcc	.+22     	; 0x11e0 <vfprintf+0x2d0>
    11ca:	34 fe       	sbrs	r3, 4
    11cc:	0b c0       	rjmp	.+22     	; 0x11e4 <vfprintf+0x2d4>
    11ce:	32 fc       	sbrc	r3, 2
    11d0:	09 c0       	rjmp	.+18     	; 0x11e4 <vfprintf+0x2d4>
    11d2:	83 2d       	mov	r24, r3
    11d4:	8e 7e       	andi	r24, 0xEE	; 238
    11d6:	a8 2e       	mov	r10, r24
    11d8:	05 c0       	rjmp	.+10     	; 0x11e4 <vfprintf+0x2d4>
    11da:	b8 2c       	mov	r11, r8
    11dc:	a3 2c       	mov	r10, r3
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <vfprintf+0x2d6>
    11e0:	b8 2c       	mov	r11, r8
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <vfprintf+0x2d6>
    11e4:	b9 2c       	mov	r11, r9
    11e6:	a4 fe       	sbrs	r10, 4
    11e8:	0f c0       	rjmp	.+30     	; 0x1208 <vfprintf+0x2f8>
    11ea:	fe 01       	movw	r30, r28
    11ec:	e8 0d       	add	r30, r8
    11ee:	f1 1d       	adc	r31, r1
    11f0:	80 81       	ld	r24, Z
    11f2:	80 33       	cpi	r24, 0x30	; 48
    11f4:	21 f4       	brne	.+8      	; 0x11fe <vfprintf+0x2ee>
    11f6:	9a 2d       	mov	r25, r10
    11f8:	99 7e       	andi	r25, 0xE9	; 233
    11fa:	a9 2e       	mov	r10, r25
    11fc:	09 c0       	rjmp	.+18     	; 0x1210 <vfprintf+0x300>
    11fe:	a2 fe       	sbrs	r10, 2
    1200:	06 c0       	rjmp	.+12     	; 0x120e <vfprintf+0x2fe>
    1202:	b3 94       	inc	r11
    1204:	b3 94       	inc	r11
    1206:	04 c0       	rjmp	.+8      	; 0x1210 <vfprintf+0x300>
    1208:	8a 2d       	mov	r24, r10
    120a:	86 78       	andi	r24, 0x86	; 134
    120c:	09 f0       	breq	.+2      	; 0x1210 <vfprintf+0x300>
    120e:	b3 94       	inc	r11
    1210:	a3 fc       	sbrc	r10, 3
    1212:	11 c0       	rjmp	.+34     	; 0x1236 <vfprintf+0x326>
    1214:	a0 fe       	sbrs	r10, 0
    1216:	06 c0       	rjmp	.+12     	; 0x1224 <vfprintf+0x314>
    1218:	b2 14       	cp	r11, r2
    121a:	88 f4       	brcc	.+34     	; 0x123e <vfprintf+0x32e>
    121c:	28 0c       	add	r2, r8
    121e:	92 2c       	mov	r9, r2
    1220:	9b 18       	sub	r9, r11
    1222:	0e c0       	rjmp	.+28     	; 0x1240 <vfprintf+0x330>
    1224:	b2 14       	cp	r11, r2
    1226:	60 f4       	brcc	.+24     	; 0x1240 <vfprintf+0x330>
    1228:	b6 01       	movw	r22, r12
    122a:	80 e2       	ldi	r24, 0x20	; 32
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
    1232:	b3 94       	inc	r11
    1234:	f7 cf       	rjmp	.-18     	; 0x1224 <vfprintf+0x314>
    1236:	b2 14       	cp	r11, r2
    1238:	18 f4       	brcc	.+6      	; 0x1240 <vfprintf+0x330>
    123a:	2b 18       	sub	r2, r11
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <vfprintf+0x332>
    123e:	98 2c       	mov	r9, r8
    1240:	21 2c       	mov	r2, r1
    1242:	a4 fe       	sbrs	r10, 4
    1244:	10 c0       	rjmp	.+32     	; 0x1266 <vfprintf+0x356>
    1246:	b6 01       	movw	r22, r12
    1248:	80 e3       	ldi	r24, 0x30	; 48
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
    1250:	a2 fe       	sbrs	r10, 2
    1252:	17 c0       	rjmp	.+46     	; 0x1282 <vfprintf+0x372>
    1254:	a1 fc       	sbrc	r10, 1
    1256:	03 c0       	rjmp	.+6      	; 0x125e <vfprintf+0x34e>
    1258:	88 e7       	ldi	r24, 0x78	; 120
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <vfprintf+0x352>
    125e:	88 e5       	ldi	r24, 0x58	; 88
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	b6 01       	movw	r22, r12
    1264:	0c c0       	rjmp	.+24     	; 0x127e <vfprintf+0x36e>
    1266:	8a 2d       	mov	r24, r10
    1268:	86 78       	andi	r24, 0x86	; 134
    126a:	59 f0       	breq	.+22     	; 0x1282 <vfprintf+0x372>
    126c:	a1 fe       	sbrs	r10, 1
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <vfprintf+0x364>
    1270:	8b e2       	ldi	r24, 0x2B	; 43
    1272:	01 c0       	rjmp	.+2      	; 0x1276 <vfprintf+0x366>
    1274:	80 e2       	ldi	r24, 0x20	; 32
    1276:	a7 fc       	sbrc	r10, 7
    1278:	8d e2       	ldi	r24, 0x2D	; 45
    127a:	b6 01       	movw	r22, r12
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
    1282:	89 14       	cp	r8, r9
    1284:	38 f4       	brcc	.+14     	; 0x1294 <vfprintf+0x384>
    1286:	b6 01       	movw	r22, r12
    1288:	80 e3       	ldi	r24, 0x30	; 48
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
    1290:	9a 94       	dec	r9
    1292:	f7 cf       	rjmp	.-18     	; 0x1282 <vfprintf+0x372>
    1294:	8a 94       	dec	r8
    1296:	f3 01       	movw	r30, r6
    1298:	e8 0d       	add	r30, r8
    129a:	f1 1d       	adc	r31, r1
    129c:	80 81       	ld	r24, Z
    129e:	b6 01       	movw	r22, r12
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
    12a6:	81 10       	cpse	r8, r1
    12a8:	f5 cf       	rjmp	.-22     	; 0x1294 <vfprintf+0x384>
    12aa:	22 20       	and	r2, r2
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <vfprintf+0x3a0>
    12ae:	42 ce       	rjmp	.-892    	; 0xf34 <vfprintf+0x24>
    12b0:	b6 01       	movw	r22, r12
    12b2:	80 e2       	ldi	r24, 0x20	; 32
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
    12ba:	2a 94       	dec	r2
    12bc:	f6 cf       	rjmp	.-20     	; 0x12aa <vfprintf+0x39a>
    12be:	f6 01       	movw	r30, r12
    12c0:	86 81       	ldd	r24, Z+6	; 0x06
    12c2:	97 81       	ldd	r25, Z+7	; 0x07
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <vfprintf+0x3ba>
    12c6:	8f ef       	ldi	r24, 0xFF	; 255
    12c8:	9f ef       	ldi	r25, 0xFF	; 255
    12ca:	2b 96       	adiw	r28, 0x0b	; 11
    12cc:	e2 e1       	ldi	r30, 0x12	; 18
    12ce:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__epilogue_restores__>

000012d2 <strnlen_P>:
    12d2:	fc 01       	movw	r30, r24
    12d4:	05 90       	lpm	r0, Z+
    12d6:	61 50       	subi	r22, 0x01	; 1
    12d8:	70 40       	sbci	r23, 0x00	; 0
    12da:	01 10       	cpse	r0, r1
    12dc:	d8 f7       	brcc	.-10     	; 0x12d4 <strnlen_P+0x2>
    12de:	80 95       	com	r24
    12e0:	90 95       	com	r25
    12e2:	8e 0f       	add	r24, r30
    12e4:	9f 1f       	adc	r25, r31
    12e6:	08 95       	ret

000012e8 <strnlen>:
    12e8:	fc 01       	movw	r30, r24
    12ea:	61 50       	subi	r22, 0x01	; 1
    12ec:	70 40       	sbci	r23, 0x00	; 0
    12ee:	01 90       	ld	r0, Z+
    12f0:	01 10       	cpse	r0, r1
    12f2:	d8 f7       	brcc	.-10     	; 0x12ea <strnlen+0x2>
    12f4:	80 95       	com	r24
    12f6:	90 95       	com	r25
    12f8:	8e 0f       	add	r24, r30
    12fa:	9f 1f       	adc	r25, r31
    12fc:	08 95       	ret

000012fe <fputc>:
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	fb 01       	movw	r30, r22
    1308:	23 81       	ldd	r18, Z+3	; 0x03
    130a:	21 fd       	sbrc	r18, 1
    130c:	03 c0       	rjmp	.+6      	; 0x1314 <fputc+0x16>
    130e:	8f ef       	ldi	r24, 0xFF	; 255
    1310:	9f ef       	ldi	r25, 0xFF	; 255
    1312:	2c c0       	rjmp	.+88     	; 0x136c <fputc+0x6e>
    1314:	22 ff       	sbrs	r18, 2
    1316:	16 c0       	rjmp	.+44     	; 0x1344 <fputc+0x46>
    1318:	46 81       	ldd	r20, Z+6	; 0x06
    131a:	57 81       	ldd	r21, Z+7	; 0x07
    131c:	24 81       	ldd	r18, Z+4	; 0x04
    131e:	35 81       	ldd	r19, Z+5	; 0x05
    1320:	42 17       	cp	r20, r18
    1322:	53 07       	cpc	r21, r19
    1324:	44 f4       	brge	.+16     	; 0x1336 <fputc+0x38>
    1326:	a0 81       	ld	r26, Z
    1328:	b1 81       	ldd	r27, Z+1	; 0x01
    132a:	9d 01       	movw	r18, r26
    132c:	2f 5f       	subi	r18, 0xFF	; 255
    132e:	3f 4f       	sbci	r19, 0xFF	; 255
    1330:	31 83       	std	Z+1, r19	; 0x01
    1332:	20 83       	st	Z, r18
    1334:	8c 93       	st	X, r24
    1336:	26 81       	ldd	r18, Z+6	; 0x06
    1338:	37 81       	ldd	r19, Z+7	; 0x07
    133a:	2f 5f       	subi	r18, 0xFF	; 255
    133c:	3f 4f       	sbci	r19, 0xFF	; 255
    133e:	37 83       	std	Z+7, r19	; 0x07
    1340:	26 83       	std	Z+6, r18	; 0x06
    1342:	14 c0       	rjmp	.+40     	; 0x136c <fputc+0x6e>
    1344:	8b 01       	movw	r16, r22
    1346:	ec 01       	movw	r28, r24
    1348:	fb 01       	movw	r30, r22
    134a:	00 84       	ldd	r0, Z+8	; 0x08
    134c:	f1 85       	ldd	r31, Z+9	; 0x09
    134e:	e0 2d       	mov	r30, r0
    1350:	09 95       	icall
    1352:	89 2b       	or	r24, r25
    1354:	e1 f6       	brne	.-72     	; 0x130e <fputc+0x10>
    1356:	d8 01       	movw	r26, r16
    1358:	16 96       	adiw	r26, 0x06	; 6
    135a:	8d 91       	ld	r24, X+
    135c:	9c 91       	ld	r25, X
    135e:	17 97       	sbiw	r26, 0x07	; 7
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	17 96       	adiw	r26, 0x07	; 7
    1364:	9c 93       	st	X, r25
    1366:	8e 93       	st	-X, r24
    1368:	16 97       	sbiw	r26, 0x06	; 6
    136a:	ce 01       	movw	r24, r28
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	1f 91       	pop	r17
    1372:	0f 91       	pop	r16
    1374:	08 95       	ret

00001376 <__ultoa_invert>:
    1376:	fa 01       	movw	r30, r20
    1378:	aa 27       	eor	r26, r26
    137a:	28 30       	cpi	r18, 0x08	; 8
    137c:	51 f1       	breq	.+84     	; 0x13d2 <__ultoa_invert+0x5c>
    137e:	20 31       	cpi	r18, 0x10	; 16
    1380:	81 f1       	breq	.+96     	; 0x13e2 <__ultoa_invert+0x6c>
    1382:	e8 94       	clt
    1384:	6f 93       	push	r22
    1386:	6e 7f       	andi	r22, 0xFE	; 254
    1388:	6e 5f       	subi	r22, 0xFE	; 254
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	8f 4f       	sbci	r24, 0xFF	; 255
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	af 4f       	sbci	r26, 0xFF	; 255
    1392:	b1 e0       	ldi	r27, 0x01	; 1
    1394:	3e d0       	rcall	.+124    	; 0x1412 <__ultoa_invert+0x9c>
    1396:	b4 e0       	ldi	r27, 0x04	; 4
    1398:	3c d0       	rcall	.+120    	; 0x1412 <__ultoa_invert+0x9c>
    139a:	67 0f       	add	r22, r23
    139c:	78 1f       	adc	r23, r24
    139e:	89 1f       	adc	r24, r25
    13a0:	9a 1f       	adc	r25, r26
    13a2:	a1 1d       	adc	r26, r1
    13a4:	68 0f       	add	r22, r24
    13a6:	79 1f       	adc	r23, r25
    13a8:	8a 1f       	adc	r24, r26
    13aa:	91 1d       	adc	r25, r1
    13ac:	a1 1d       	adc	r26, r1
    13ae:	6a 0f       	add	r22, r26
    13b0:	71 1d       	adc	r23, r1
    13b2:	81 1d       	adc	r24, r1
    13b4:	91 1d       	adc	r25, r1
    13b6:	a1 1d       	adc	r26, r1
    13b8:	20 d0       	rcall	.+64     	; 0x13fa <__ultoa_invert+0x84>
    13ba:	09 f4       	brne	.+2      	; 0x13be <__ultoa_invert+0x48>
    13bc:	68 94       	set
    13be:	3f 91       	pop	r19
    13c0:	2a e0       	ldi	r18, 0x0A	; 10
    13c2:	26 9f       	mul	r18, r22
    13c4:	11 24       	eor	r1, r1
    13c6:	30 19       	sub	r19, r0
    13c8:	30 5d       	subi	r19, 0xD0	; 208
    13ca:	31 93       	st	Z+, r19
    13cc:	de f6       	brtc	.-74     	; 0x1384 <__ultoa_invert+0xe>
    13ce:	cf 01       	movw	r24, r30
    13d0:	08 95       	ret
    13d2:	46 2f       	mov	r20, r22
    13d4:	47 70       	andi	r20, 0x07	; 7
    13d6:	40 5d       	subi	r20, 0xD0	; 208
    13d8:	41 93       	st	Z+, r20
    13da:	b3 e0       	ldi	r27, 0x03	; 3
    13dc:	0f d0       	rcall	.+30     	; 0x13fc <__ultoa_invert+0x86>
    13de:	c9 f7       	brne	.-14     	; 0x13d2 <__ultoa_invert+0x5c>
    13e0:	f6 cf       	rjmp	.-20     	; 0x13ce <__ultoa_invert+0x58>
    13e2:	46 2f       	mov	r20, r22
    13e4:	4f 70       	andi	r20, 0x0F	; 15
    13e6:	40 5d       	subi	r20, 0xD0	; 208
    13e8:	4a 33       	cpi	r20, 0x3A	; 58
    13ea:	18 f0       	brcs	.+6      	; 0x13f2 <__ultoa_invert+0x7c>
    13ec:	49 5d       	subi	r20, 0xD9	; 217
    13ee:	31 fd       	sbrc	r19, 1
    13f0:	40 52       	subi	r20, 0x20	; 32
    13f2:	41 93       	st	Z+, r20
    13f4:	02 d0       	rcall	.+4      	; 0x13fa <__ultoa_invert+0x84>
    13f6:	a9 f7       	brne	.-22     	; 0x13e2 <__ultoa_invert+0x6c>
    13f8:	ea cf       	rjmp	.-44     	; 0x13ce <__ultoa_invert+0x58>
    13fa:	b4 e0       	ldi	r27, 0x04	; 4
    13fc:	a6 95       	lsr	r26
    13fe:	97 95       	ror	r25
    1400:	87 95       	ror	r24
    1402:	77 95       	ror	r23
    1404:	67 95       	ror	r22
    1406:	ba 95       	dec	r27
    1408:	c9 f7       	brne	.-14     	; 0x13fc <__ultoa_invert+0x86>
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	61 05       	cpc	r22, r1
    140e:	71 05       	cpc	r23, r1
    1410:	08 95       	ret
    1412:	9b 01       	movw	r18, r22
    1414:	ac 01       	movw	r20, r24
    1416:	0a 2e       	mov	r0, r26
    1418:	06 94       	lsr	r0
    141a:	57 95       	ror	r21
    141c:	47 95       	ror	r20
    141e:	37 95       	ror	r19
    1420:	27 95       	ror	r18
    1422:	ba 95       	dec	r27
    1424:	c9 f7       	brne	.-14     	; 0x1418 <__ultoa_invert+0xa2>
    1426:	62 0f       	add	r22, r18
    1428:	73 1f       	adc	r23, r19
    142a:	84 1f       	adc	r24, r20
    142c:	95 1f       	adc	r25, r21
    142e:	a0 1d       	adc	r26, r0
    1430:	08 95       	ret

00001432 <__prologue_saves__>:
    1432:	2f 92       	push	r2
    1434:	3f 92       	push	r3
    1436:	4f 92       	push	r4
    1438:	5f 92       	push	r5
    143a:	6f 92       	push	r6
    143c:	7f 92       	push	r7
    143e:	8f 92       	push	r8
    1440:	9f 92       	push	r9
    1442:	af 92       	push	r10
    1444:	bf 92       	push	r11
    1446:	cf 92       	push	r12
    1448:	df 92       	push	r13
    144a:	ef 92       	push	r14
    144c:	ff 92       	push	r15
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	ca 1b       	sub	r28, r26
    145c:	db 0b       	sbc	r29, r27
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
    1468:	09 94       	ijmp

0000146a <__epilogue_restores__>:
    146a:	2a 88       	ldd	r2, Y+18	; 0x12
    146c:	39 88       	ldd	r3, Y+17	; 0x11
    146e:	48 88       	ldd	r4, Y+16	; 0x10
    1470:	5f 84       	ldd	r5, Y+15	; 0x0f
    1472:	6e 84       	ldd	r6, Y+14	; 0x0e
    1474:	7d 84       	ldd	r7, Y+13	; 0x0d
    1476:	8c 84       	ldd	r8, Y+12	; 0x0c
    1478:	9b 84       	ldd	r9, Y+11	; 0x0b
    147a:	aa 84       	ldd	r10, Y+10	; 0x0a
    147c:	b9 84       	ldd	r11, Y+9	; 0x09
    147e:	c8 84       	ldd	r12, Y+8	; 0x08
    1480:	df 80       	ldd	r13, Y+7	; 0x07
    1482:	ee 80       	ldd	r14, Y+6	; 0x06
    1484:	fd 80       	ldd	r15, Y+5	; 0x05
    1486:	0c 81       	ldd	r16, Y+4	; 0x04
    1488:	1b 81       	ldd	r17, Y+3	; 0x03
    148a:	aa 81       	ldd	r26, Y+2	; 0x02
    148c:	b9 81       	ldd	r27, Y+1	; 0x01
    148e:	ce 0f       	add	r28, r30
    1490:	d1 1d       	adc	r29, r1
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
    149c:	ed 01       	movw	r28, r26
    149e:	08 95       	ret

000014a0 <_exit>:
    14a0:	f8 94       	cli

000014a2 <__stop_program>:
    14a2:	ff cf       	rjmp	.-2      	; 0x14a2 <__stop_program>
