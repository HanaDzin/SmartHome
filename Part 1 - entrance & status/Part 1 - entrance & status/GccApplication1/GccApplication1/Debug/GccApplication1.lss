
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  000004de  00000572  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000b0  008000b0  000005c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001226  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a2  00000000  00000000  00001926  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009dc  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00002ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b3  00000000  00000000  00002e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a9  00000000  00000000  00003333  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003bdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3b       	cpi	r26, 0xB0	; 176
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 eb       	ldi	r26, 0xB0	; 176
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3b       	cpi	r26, 0xB2	; 178
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 97 01 	call	0x32e	; 0x32e <main>
  8a:	0c 94 6d 02 	jmp	0x4da	; 0x4da <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keyfind>:

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;
  92:	30 ef       	ldi	r19, 0xF0	; 240
		KEY_PRT = 0xFF;
  94:	2f ef       	ldi	r18, 0xFF	; 255
			
			_delay_ms (40);							//20 ms key debounce time
			colloc = (KEY_PIN & 0x0F);
		}while(colloc == 0x0F);

		KEY_PRT = 0xEF;
  96:	9f ee       	ldi	r25, 0xEF	; 239
		{
			rowloc = 0;
			break;
		}

		KEY_PRT = 0xDF;
  98:	6f ed       	ldi	r22, 0xDF	; 223
		{
			rowloc = 1;
			break;
		}
		
		KEY_PRT = 0xBF;
  9a:	5f eb       	ldi	r21, 0xBF	; 191
		{
			rowloc = 2;
			break;
		}

		KEY_PRT = 0x7F;
  9c:	4f e7       	ldi	r20, 0x7F	; 127

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;
  9e:	3a bb       	out	0x1a, r19	; 26
		KEY_PRT = 0xFF;
  a0:	2b bb       	out	0x1b, r18	; 27

		do
		{
			KEY_PRT &= 0x0F;
  a2:	8b b3       	in	r24, 0x1b	; 27
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
  a8:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
  aa:	89 b3       	in	r24, 0x19	; 25
  ac:	8f 70       	andi	r24, 0x0F	; 15
  ae:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__data_end>
		}while(colloc != 0x0F);
  b2:	8f 30       	cpi	r24, 0x0F	; 15
  b4:	b1 f7       	brne	.-20     	; 0xa2 <keyfind+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	ef e3       	ldi	r30, 0x3F	; 63
  b8:	fc e9       	ldi	r31, 0x9C	; 156
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <keyfind+0x28>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <keyfind+0x2e>
  c0:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);						//20ms key debounce time
				colloc = (KEY_PIN & 0x0F);
  c2:	89 b3       	in	r24, 0x19	; 25
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__data_end>
			}while(colloc == 0x0F);
  ca:	8f 30       	cpi	r24, 0x0F	; 15
  cc:	a1 f3       	breq	.-24     	; 0xb6 <keyfind+0x24>
  ce:	ff ef       	ldi	r31, 0xFF	; 255
  d0:	79 ef       	ldi	r23, 0xF9	; 249
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	f1 50       	subi	r31, 0x01	; 1
  d6:	70 40       	sbci	r23, 0x00	; 0
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <keyfind+0x42>
  dc:	00 c0       	rjmp	.+0      	; 0xde <keyfind+0x4c>
  de:	00 00       	nop
			
			_delay_ms (40);							//20 ms key debounce time
			colloc = (KEY_PIN & 0x0F);
  e0:	89 b3       	in	r24, 0x19	; 25
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__data_end>
		}while(colloc == 0x0F);
  e8:	8f 30       	cpi	r24, 0x0F	; 15
  ea:	29 f3       	breq	.-54     	; 0xb6 <keyfind+0x24>

		KEY_PRT = 0xEF;
  ec:	9b bb       	out	0x1b, r25	; 27
		asm("NOP");
  ee:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
  f0:	89 b3       	in	r24, 0x19	; 25
  f2:	8f 70       	andi	r24, 0x0F	; 15
  f4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__data_end>
		if(colloc != 0x0F)
  f8:	8f 30       	cpi	r24, 0x0F	; 15
  fa:	19 f0       	breq	.+6      	; 0x102 <keyfind+0x70>
		{
			rowloc = 0;
  fc:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <rowloc>
			break;
 100:	24 c0       	rjmp	.+72     	; 0x14a <keyfind+0xb8>
		}

		KEY_PRT = 0xDF;
 102:	6b bb       	out	0x1b, r22	; 27
		asm("NOP");
 104:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 106:	89 b3       	in	r24, 0x19	; 25
 108:	8f 70       	andi	r24, 0x0F	; 15
 10a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__data_end>
		if(colloc != 0x0F)
 10e:	8f 30       	cpi	r24, 0x0F	; 15
 110:	21 f0       	breq	.+8      	; 0x11a <keyfind+0x88>
		{
			rowloc = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <rowloc>
			break;
 118:	18 c0       	rjmp	.+48     	; 0x14a <keyfind+0xb8>
		}
		
		KEY_PRT = 0xBF;
 11a:	5b bb       	out	0x1b, r21	; 27
		asm("NOP");
 11c:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 11e:	89 b3       	in	r24, 0x19	; 25
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__data_end>
		if(colloc != 0x0F)
 126:	8f 30       	cpi	r24, 0x0F	; 15
 128:	21 f0       	breq	.+8      	; 0x132 <keyfind+0xa0>
		{
			rowloc = 2;
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <rowloc>
			break;
 130:	0c c0       	rjmp	.+24     	; 0x14a <keyfind+0xb8>
		}

		KEY_PRT = 0x7F;
 132:	4b bb       	out	0x1b, r20	; 27
		asm("NOP");
 134:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 136:	89 b3       	in	r24, 0x19	; 25
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__data_end>
		if(colloc != 0x0F)
 13e:	8f 30       	cpi	r24, 0x0F	; 15
 140:	09 f4       	brne	.+2      	; 0x144 <keyfind+0xb2>
 142:	ad cf       	rjmp	.-166    	; 0x9e <keyfind+0xc>
		{
			rowloc = 3;
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <rowloc>
			break;
		}
	}

	
	if(colloc == 0x0E)
 14a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__data_end>
 14e:	8e 30       	cpi	r24, 0x0E	; 14
 150:	59 f4       	brne	.+22     	; 0x168 <keyfind+0xd6>
	return(keypad[rowloc][0]);
 152:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <rowloc>
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	e0 5a       	subi	r30, 0xA0	; 160
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	80 81       	ld	r24, Z
 166:	08 95       	ret
	
	else if(colloc == 0x0D)
 168:	8d 30       	cpi	r24, 0x0D	; 13
 16a:	59 f4       	brne	.+22     	; 0x182 <keyfind+0xf0>
	return(keypad[rowloc][1]);
 16c:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <rowloc>
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e0 5a       	subi	r30, 0xA0	; 160
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	81 81       	ldd	r24, Z+1	; 0x01
 180:	08 95       	ret
	
	else if(colloc == 0x0B)
 182:	8b 30       	cpi	r24, 0x0B	; 11
 184:	59 f4       	brne	.+22     	; 0x19c <keyfind+0x10a>
	return(keypad[rowloc][2]);
 186:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <rowloc>
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	e0 5a       	subi	r30, 0xA0	; 160
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	82 81       	ldd	r24, Z+2	; 0x02
 19a:	08 95       	ret
	
	else
	return(keypad[rowloc][3]);
 19c:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <rowloc>
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	e0 5a       	subi	r30, 0xA0	; 160
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	83 81       	ldd	r24, Z+3	; 0x03
}
 1b0:	08 95       	ret

000001b2 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 1b2:	97 9a       	sbi	0x12, 7	; 18
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <toggle_e+0x4>
 1b6:	97 98       	cbi	0x12, 7	; 18
 1b8:	08 95       	ret

000001ba <lcd_write>:
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	d8 2f       	mov	r29, r24
 1c0:	66 23       	and	r22, r22
 1c2:	11 f0       	breq	.+4      	; 0x1c8 <lcd_write+0xe>
 1c4:	95 9a       	sbi	0x12, 5	; 18
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <lcd_write+0x10>
 1c8:	95 98       	cbi	0x12, 5	; 18
 1ca:	96 98       	cbi	0x12, 6	; 18
 1cc:	87 b3       	in	r24, 0x17	; 23
 1ce:	8f 60       	ori	r24, 0x0F	; 15
 1d0:	87 bb       	out	0x17, r24	; 23
 1d2:	c8 b3       	in	r28, 0x18	; 24
 1d4:	c0 7f       	andi	r28, 0xF0	; 240
 1d6:	8d 2f       	mov	r24, r29
 1d8:	82 95       	swap	r24
 1da:	8f 70       	andi	r24, 0x0F	; 15
 1dc:	8c 2b       	or	r24, r28
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <toggle_e>
 1e4:	df 70       	andi	r29, 0x0F	; 15
 1e6:	dc 2b       	or	r29, r28
 1e8:	d8 bb       	out	0x18, r29	; 24
 1ea:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <toggle_e>
 1ee:	cf 60       	ori	r28, 0x0F	; 15
 1f0:	c8 bb       	out	0x18, r28	; 24
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <lcd_read>:
 1f8:	88 23       	and	r24, r24
 1fa:	11 f0       	breq	.+4      	; 0x200 <lcd_read+0x8>
 1fc:	95 9a       	sbi	0x12, 5	; 18
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <lcd_read+0xa>
 200:	95 98       	cbi	0x12, 5	; 18
 202:	96 9a       	sbi	0x12, 6	; 18
 204:	87 b3       	in	r24, 0x17	; 23
 206:	80 7f       	andi	r24, 0xF0	; 240
 208:	87 bb       	out	0x17, r24	; 23
 20a:	97 9a       	sbi	0x12, 7	; 18
 20c:	00 c0       	rjmp	.+0      	; 0x20e <lcd_read+0x16>
 20e:	96 b3       	in	r25, 0x16	; 22
 210:	97 98       	cbi	0x12, 7	; 18
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_read+0x1c>
 214:	97 9a       	sbi	0x12, 7	; 18
 216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_read+0x20>
 218:	26 b3       	in	r18, 0x16	; 22
 21a:	2f 70       	andi	r18, 0x0F	; 15
 21c:	89 2f       	mov	r24, r25
 21e:	82 95       	swap	r24
 220:	80 7f       	andi	r24, 0xF0	; 240
 222:	97 98       	cbi	0x12, 7	; 18
 224:	82 2b       	or	r24, r18
 226:	08 95       	ret

00000228 <lcd_waitbusy>:
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_read>
 22e:	88 23       	and	r24, r24
 230:	dc f3       	brlt	.-10     	; 0x228 <lcd_waitbusy>
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <lcd_waitbusy+0xe>
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_read>
 240:	08 95       	ret

00000242 <lcd_command>:
 242:	cf 93       	push	r28
 244:	c8 2f       	mov	r28, r24
 246:	0e 94 14 01 	call	0x228	; 0x228 <lcd_waitbusy>
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	8c 2f       	mov	r24, r28
 24e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_write>
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <lcd_gotoxy>:
 256:	61 11       	cpse	r22, r1
 258:	04 c0       	rjmp	.+8      	; 0x262 <lcd_gotoxy+0xc>
 25a:	80 58       	subi	r24, 0x80	; 128
 25c:	0e 94 21 01 	call	0x242	; 0x242 <lcd_command>
 260:	08 95       	ret
 262:	80 54       	subi	r24, 0x40	; 64
 264:	0e 94 21 01 	call	0x242	; 0x242 <lcd_command>
 268:	08 95       	ret

0000026a <lcd_clrscr>:
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 21 01 	call	0x242	; 0x242 <lcd_command>
 270:	08 95       	ret

00000272 <lcd_putc>:
 272:	cf 93       	push	r28
 274:	c8 2f       	mov	r28, r24
 276:	0e 94 14 01 	call	0x228	; 0x228 <lcd_waitbusy>
 27a:	ca 30       	cpi	r28, 0x0A	; 10
 27c:	49 f4       	brne	.+18     	; 0x290 <lcd_putc+0x1e>
 27e:	80 34       	cpi	r24, 0x40	; 64
 280:	10 f0       	brcs	.+4      	; 0x286 <lcd_putc+0x14>
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	01 c0       	rjmp	.+2      	; 0x288 <lcd_putc+0x16>
 286:	80 e4       	ldi	r24, 0x40	; 64
 288:	80 58       	subi	r24, 0x80	; 128
 28a:	0e 94 21 01 	call	0x242	; 0x242 <lcd_command>
 28e:	04 c0       	rjmp	.+8      	; 0x298 <lcd_putc+0x26>
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	8c 2f       	mov	r24, r28
 294:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_write>
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <lcd_puts>:
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	ec 01       	movw	r28, r24
 2a2:	21 96       	adiw	r28, 0x01	; 1
 2a4:	fc 01       	movw	r30, r24
 2a6:	80 81       	ld	r24, Z
 2a8:	88 23       	and	r24, r24
 2aa:	29 f0       	breq	.+10     	; 0x2b6 <lcd_puts+0x1a>
 2ac:	0e 94 39 01 	call	0x272	; 0x272 <lcd_putc>
 2b0:	89 91       	ld	r24, Y+
 2b2:	81 11       	cpse	r24, r1
 2b4:	fb cf       	rjmp	.-10     	; 0x2ac <lcd_puts+0x10>
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 2c4:	87 b3       	in	r24, 0x17	; 23
 2c6:	8f 60       	ori	r24, 0x0F	; 15
 2c8:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 2ca:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 2cc:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 2ce:	8f 9a       	sbi	0x11, 7	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2d0:	80 e3       	ldi	r24, 0x30	; 48
 2d2:	93 e7       	ldi	r25, 0x73	; 115
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <lcd_init+0x18>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 2d8:	c1 9a       	sbi	0x18, 1	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 2da:	c0 9a       	sbi	0x18, 0	; 24
    lcd_e_toggle();
 2dc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2e0:	80 ef       	ldi	r24, 0xF0	; 240
 2e2:	93 e2       	ldi	r25, 0x23	; 35
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <lcd_init+0x28>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 2e8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2ec:	c5 e7       	ldi	r28, 0x75	; 117
 2ee:	d0 e0       	ldi	r29, 0x00	; 0
 2f0:	ce 01       	movw	r24, r28
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <lcd_init+0x36>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 2f6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2fa:	ce 01       	movw	r24, r28
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <lcd_init+0x40>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 300:	c0 98       	cbi	0x18, 0	; 24
    lcd_e_toggle();
 302:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 306:	21 97       	sbiw	r28, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <lcd_init+0x4a>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 30a:	88 e2       	ldi	r24, 0x28	; 40
 30c:	0e 94 21 01 	call	0x242	; 0x242 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 310:	88 e0       	ldi	r24, 0x08	; 8
 312:	0e 94 21 01 	call	0x242	; 0x242 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 316:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 31a:	86 e0       	ldi	r24, 0x06	; 6
 31c:	0e 94 21 01 	call	0x242	; 0x242 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 320:	81 2f       	mov	r24, r17
 322:	0e 94 21 01 	call	0x242	; 0x242 <lcd_command>

}/* lcd_init */
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	08 95       	ret

0000032e <main>:
#include <util/delay.h>



int main(void)
{
 32e:	8f 92       	push	r8
 330:	9f 92       	push	r9
 332:	af 92       	push	r10
 334:	bf 92       	push	r11
 336:	cf 92       	push	r12
 338:	df 92       	push	r13
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
 34a:	28 97       	sbiw	r28, 0x08	; 8
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	de bf       	out	0x3e, r29	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	cd bf       	out	0x3d, r28	; 61
	DDRD = _BV(4);
 356:	80 e1       	ldi	r24, 0x10	; 16
 358:	81 bb       	out	0x11, r24	; 17

	TCCR1A = _BV(COM1B1) | _BV(WGM10);
 35a:	81 e2       	ldi	r24, 0x21	; 33
 35c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12) | _BV(CS11);
 35e:	8a e0       	ldi	r24, 0x0A	; 10
 360:	8e bd       	out	0x2e, r24	; 46
	OCR1B = 128;
 362:	80 e8       	ldi	r24, 0x80	; 128
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	99 bd       	out	0x29, r25	; 41
 368:	88 bd       	out	0x28, r24	; 40
	
	lcd_init(LCD_DISP_ON);
 36a:	8c e0       	ldi	r24, 0x0C	; 12
 36c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_init>
	lcd_clrscr();
 370:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_clrscr>
	lcd_gotoxy(1,0);
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_gotoxy>
	lcd_puts("Unesi lozinku");
 37c:	80 e7       	ldi	r24, 0x70	; 112
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_puts>
	
	char array[4];
	int i = 0;
	int wrongCounter = 0;
	
	char password[4] = {'1', '2', '3', '4'};
 384:	81 e3       	ldi	r24, 0x31	; 49
 386:	8d 83       	std	Y+5, r24	; 0x05
 388:	82 e3       	ldi	r24, 0x32	; 50
 38a:	8e 83       	std	Y+6, r24	; 0x06
 38c:	83 e3       	ldi	r24, 0x33	; 51
 38e:	8f 83       	std	Y+7, r24	; 0x07
 390:	84 e3       	ldi	r24, 0x34	; 52
 392:	88 87       	std	Y+8, r24	; 0x08
	lcd_gotoxy(1,0);
	lcd_puts("Unesi lozinku");
	
	char array[4];
	int i = 0;
	int wrongCounter = 0;
 394:	c1 2c       	mov	r12, r1
 396:	d1 2c       	mov	r13, r1
	lcd_clrscr();
	lcd_gotoxy(1,0);
	lcd_puts("Unesi lozinku");
	
	char array[4];
	int i = 0;
 398:	00 e0       	ldi	r16, 0x00	; 0
 39a:	10 e0       	ldi	r17, 0x00	; 0
 39c:	7e 01       	movw	r14, r28
 39e:	25 e0       	ldi	r18, 0x05	; 5
 3a0:	e2 0e       	add	r14, r18
 3a2:	f1 1c       	adc	r15, r1
		//passwordInput(array, i);
		lcd_gotoxy(0, 1);
		while(i < 4 ) {
			array[i] = keyfind();
			lcd_puts("*");
			i++;
 3a4:	68 94       	set
 3a6:	aa 24       	eor	r10, r10
 3a8:	a2 f8       	bld	r10, 2
 3aa:	b1 2c       	mov	r11, r1
			lcd_clrscr();
		} else {
			lcd_puts(" ");
			lcd_puts("Pokusajte opet");
			_delay_ms(2000);
			i = 0;
 3ac:	81 2c       	mov	r8, r1
 3ae:	91 2c       	mov	r9, r1
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <main+0x88>
 3b2:	08 2d       	mov	r16, r8
 3b4:	19 2d       	mov	r17, r9
	
	char password[4] = {'1', '2', '3', '4'};
	
	while(1){
		//passwordInput(array, i);
		lcd_gotoxy(0, 1);
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_gotoxy>
		while(i < 4 ) {
 3be:	04 30       	cpi	r16, 0x04	; 4
 3c0:	11 05       	cpc	r17, r1
 3c2:	a4 f4       	brge	.+40     	; 0x3ec <main+0xbe>
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	8c 0f       	add	r24, r28
 3ca:	9d 1f       	adc	r25, r29
 3cc:	08 0f       	add	r16, r24
 3ce:	19 1f       	adc	r17, r25
			array[i] = keyfind();
 3d0:	0e 94 49 00 	call	0x92	; 0x92 <keyfind>
 3d4:	f8 01       	movw	r30, r16
 3d6:	81 93       	st	Z+, r24
 3d8:	8f 01       	movw	r16, r30
			lcd_puts("*");
 3da:	8e e7       	ldi	r24, 0x7E	; 126
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_puts>
	char password[4] = {'1', '2', '3', '4'};
	
	while(1){
		//passwordInput(array, i);
		lcd_gotoxy(0, 1);
		while(i < 4 ) {
 3e2:	0e 15       	cp	r16, r14
 3e4:	1f 05       	cpc	r17, r15
 3e6:	a1 f7       	brne	.-24     	; 0x3d0 <main+0xa2>
			array[i] = keyfind();
			lcd_puts("*");
			i++;
 3e8:	0a 2d       	mov	r16, r10
 3ea:	1b 2d       	mov	r17, r11
		}
	
		lcd_command(0xc0);
 3ec:	80 ec       	ldi	r24, 0xC0	; 192
 3ee:	0e 94 21 01 	call	0x242	; 0x242 <lcd_command>
		
		if(!memcmp(array, password, sizeof(array))) {
 3f2:	4a 2d       	mov	r20, r10
 3f4:	5b 2d       	mov	r21, r11
 3f6:	b7 01       	movw	r22, r14
 3f8:	ce 01       	movw	r24, r28
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	0e 94 60 02 	call	0x4c0	; 0x4c0 <memcmp>
 400:	89 2b       	or	r24, r25
 402:	a1 f4       	brne	.+40     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			lcd_puts(" ");
 404:	80 e8       	ldi	r24, 0x80	; 128
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_puts>
			lcd_puts("Kuca otkljucana");
 40c:	82 e8       	ldi	r24, 0x82	; 130
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_puts>
 414:	ff ef       	ldi	r31, 0xFF	; 255
 416:	24 e3       	ldi	r18, 0x34	; 52
 418:	8c e0       	ldi	r24, 0x0C	; 12
 41a:	f1 50       	subi	r31, 0x01	; 1
 41c:	20 40       	sbci	r18, 0x00	; 0
 41e:	80 40       	sbci	r24, 0x00	; 0
 420:	e1 f7       	brne	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 424:	00 00       	nop
			_delay_ms(500);
			lcd_clrscr();
 426:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_clrscr>
 42a:	c5 cf       	rjmp	.-118    	; 0x3b6 <main+0x88>
		} else {
			lcd_puts(" ");
 42c:	80 e8       	ldi	r24, 0x80	; 128
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_puts>
			lcd_puts("Pokusajte opet");
 434:	82 e9       	ldi	r24, 0x92	; 146
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_puts>
 43c:	9f ef       	ldi	r25, 0xFF	; 255
 43e:	e3 ed       	ldi	r30, 0xD3	; 211
 440:	f0 e3       	ldi	r31, 0x30	; 48
 442:	91 50       	subi	r25, 0x01	; 1
 444:	e0 40       	sbci	r30, 0x00	; 0
 446:	f0 40       	sbci	r31, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
			_delay_ms(2000);
			i = 0;
			//printsPasswordInput();
			lcd_clrscr();
 44e:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_clrscr>
			lcd_gotoxy(1,0);
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_gotoxy>
			lcd_puts("Unesi lozinku");
 45a:	80 e7       	ldi	r24, 0x70	; 112
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_puts>
			wrongCounter++;
 462:	2f ef       	ldi	r18, 0xFF	; 255
 464:	c2 1a       	sub	r12, r18
 466:	d2 0a       	sbc	r13, r18
			if (wrongCounter == 3) {
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	c8 16       	cp	r12, r24
 46c:	d1 04       	cpc	r13, r1
 46e:	09 f0       	breq	.+2      	; 0x472 <__stack+0x13>
 470:	a0 cf       	rjmp	.-192    	; 0x3b2 <main+0x84>
				DDRC = 1 << PC0;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	84 bb       	out	0x14, r24	; 20
				lcd_clrscr();
 476:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_clrscr>
				lcd_puts("Ulaz zabranjen");
 47a:	81 ea       	ldi	r24, 0xA1	; 161
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_puts>
 482:	9f ef       	ldi	r25, 0xFF	; 255
 484:	e3 ed       	ldi	r30, 0xD3	; 211
 486:	f0 e3       	ldi	r31, 0x30	; 48
 488:	91 50       	subi	r25, 0x01	; 1
 48a:	e0 40       	sbci	r30, 0x00	; 0
 48c:	f0 40       	sbci	r31, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <__stack+0x29>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__stack+0x33>
 492:	00 00       	nop
				_delay_ms(2000);
				DDRC = 0 << PC0;
 494:	14 ba       	out	0x14, r1	; 20
				break;
			} 
		}
	}	
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	28 96       	adiw	r28, 0x08	; 8
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	f8 94       	cli
 4a0:	de bf       	out	0x3e, r29	; 62
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	cd bf       	out	0x3d, r28	; 61
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	df 90       	pop	r13
 4b4:	cf 90       	pop	r12
 4b6:	bf 90       	pop	r11
 4b8:	af 90       	pop	r10
 4ba:	9f 90       	pop	r9
 4bc:	8f 90       	pop	r8
 4be:	08 95       	ret

000004c0 <memcmp>:
 4c0:	fb 01       	movw	r30, r22
 4c2:	dc 01       	movw	r26, r24
 4c4:	04 c0       	rjmp	.+8      	; 0x4ce <memcmp+0xe>
 4c6:	8d 91       	ld	r24, X+
 4c8:	01 90       	ld	r0, Z+
 4ca:	80 19       	sub	r24, r0
 4cc:	21 f4       	brne	.+8      	; 0x4d6 <memcmp+0x16>
 4ce:	41 50       	subi	r20, 0x01	; 1
 4d0:	50 40       	sbci	r21, 0x00	; 0
 4d2:	c8 f7       	brcc	.-14     	; 0x4c6 <memcmp+0x6>
 4d4:	88 1b       	sub	r24, r24
 4d6:	99 0b       	sbc	r25, r25
 4d8:	08 95       	ret

000004da <_exit>:
 4da:	f8 94       	cli

000004dc <__stop_program>:
 4dc:	ff cf       	rjmp	.-2      	; 0x4dc <__stop_program>
